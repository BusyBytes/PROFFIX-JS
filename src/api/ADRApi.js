/**
 * PROFFIX REST API Request Sammlung
 * Dies ist eine Request-Sammlung der PROFFIX REST API, welche das PROFFIX REST API Entwicklerhandbuch unter [https://www.proffix.net/entwickler/restapi/handbuch](https://www.proffix.net/entwickler/restapi/handbuch) erg√§nzt.
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ADR1AdressdokumentRequest', 'model/ADR1Adresse17BAdressNr7D', 'model/ADR1Adressgruppe17BAdressgruppeNr7D', 'model/ADR1AdressgruppeRequest', 'model/ADR1KommunikationRequest', 'model/ADR1Kontakt17BKontaktNr7D', 'model/ADR1KontaktRequest', 'model/ADR1Kontakttyp17BKontakttypNr7D', 'model/ADR1Notiz17BNotizNr7D', 'model/ADR1NotizRequest', 'model/ADR1Notizart17BNotizartNr7D', 'model/ADR1Zahlungsart17BZahlungsartNr7D', 'model/ADR1ZahlungsartRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ADR1AdressdokumentRequest'), require('../model/ADR1Adresse17BAdressNr7D'), require('../model/ADR1Adressgruppe17BAdressgruppeNr7D'), require('../model/ADR1AdressgruppeRequest'), require('../model/ADR1KommunikationRequest'), require('../model/ADR1Kontakt17BKontaktNr7D'), require('../model/ADR1KontaktRequest'), require('../model/ADR1Kontakttyp17BKontakttypNr7D'), require('../model/ADR1Notiz17BNotizNr7D'), require('../model/ADR1NotizRequest'), require('../model/ADR1Notizart17BNotizartNr7D'), require('../model/ADR1Zahlungsart17BZahlungsartNr7D'), require('../model/ADR1ZahlungsartRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.ProffixRestApiRequestSammlung) {
      root.ProffixRestApiRequestSammlung = {};
    }
    root.ProffixRestApiRequestSammlung.ADRApi = factory(root.ProffixRestApiRequestSammlung.ApiClient, root.ProffixRestApiRequestSammlung.ADR1AdressdokumentRequest, root.ProffixRestApiRequestSammlung.ADR1Adresse17BAdressNr7D, root.ProffixRestApiRequestSammlung.ADR1Adressgruppe17BAdressgruppeNr7D, root.ProffixRestApiRequestSammlung.ADR1AdressgruppeRequest, root.ProffixRestApiRequestSammlung.ADR1KommunikationRequest, root.ProffixRestApiRequestSammlung.ADR1Kontakt17BKontaktNr7D, root.ProffixRestApiRequestSammlung.ADR1KontaktRequest, root.ProffixRestApiRequestSammlung.ADR1Kontakttyp17BKontakttypNr7D, root.ProffixRestApiRequestSammlung.ADR1Notiz17BNotizNr7D, root.ProffixRestApiRequestSammlung.ADR1NotizRequest, root.ProffixRestApiRequestSammlung.ADR1Notizart17BNotizartNr7D, root.ProffixRestApiRequestSammlung.ADR1Zahlungsart17BZahlungsartNr7D, root.ProffixRestApiRequestSammlung.ADR1ZahlungsartRequest);
  }
}(this, function(ApiClient, ADR1AdressdokumentRequest, ADR1Adresse17BAdressNr7D, ADR1Adressgruppe17BAdressgruppeNr7D, ADR1AdressgruppeRequest, ADR1KommunikationRequest, ADR1Kontakt17BKontaktNr7D, ADR1KontaktRequest, ADR1Kontakttyp17BKontakttypNr7D, ADR1Notiz17BNotizNr7D, ADR1NotizRequest, ADR1Notizart17BNotizartNr7D, ADR1Zahlungsart17BZahlungsartNr7D, ADR1ZahlungsartRequest) {
  'use strict';

  /**
   * ADR service.
   * @module api/ADRApi
   * @version 1.0
   */

  /**
   * Constructs a new ADRApi. 
   * @alias module:api/ADRApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * ADR/Adressdokument
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/ADR1AdressdokumentRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.aDRAdressdokumentWithHttpInfo = function(contentType, pxSessionId, body) {
      var postBody = body;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling aDRAdressdokument");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling aDRAdressdokument");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling aDRAdressdokument");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/ADR/Adressdokument', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * ADR/Adressdokument
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/ADR1AdressdokumentRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.aDRAdressdokument = function(contentType, pxSessionId, body) {
      return this.aDRAdressdokumentWithHttpInfo(contentType, pxSessionId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * ADR/Adressdokument/{AdressDokumentNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.aDRAdressdokumentAdressDokumentNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling aDRAdressdokumentAdressDokumentNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling aDRAdressdokumentAdressDokumentNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/ADR/Adressdokument/1', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * ADR/Adressdokument/{AdressDokumentNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.aDRAdressdokumentAdressDokumentNr = function(contentType, pxSessionId) {
      return this.aDRAdressdokumentAdressDokumentNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * ADR/Adresse
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.aDRAdresseWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling aDRAdresse");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling aDRAdresse");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/ADR/Adresse', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * ADR/Adresse
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.aDRAdresse = function(contentType, pxSessionId) {
      return this.aDRAdresseWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * ADR/Adresse/{AdressNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ADR1Adresse17BAdressNr7D} and HTTP response
     */
    this.aDRAdresseAdressNrWithHttpInfo = function(depth, contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'depth' is set
      if (depth === undefined || depth === null) {
        throw new Error("Missing the required parameter 'depth' when calling aDRAdresseAdressNr");
      }

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling aDRAdresseAdressNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling aDRAdresseAdressNr");
      }


      var pathParams = {
      };
      var queryParams = {
        'depth': depth,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = ADR1Adresse17BAdressNr7D;

      return this.apiClient.callApi(
        '/ADR/Adresse/1', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * ADR/Adresse/{AdressNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ADR1Adresse17BAdressNr7D}
     */
    this.aDRAdresseAdressNr = function(depth, contentType, pxSessionId) {
      return this.aDRAdresseAdressNrWithHttpInfo(depth, contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * ADR/Adressgruppe
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/ADR1AdressgruppeRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.aDRAdressgruppeWithHttpInfo = function(contentType, pxSessionId, body) {
      var postBody = body;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling aDRAdressgruppe");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling aDRAdressgruppe");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling aDRAdressgruppe");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/ADR/Adressgruppe', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * ADR/Adressgruppe
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/ADR1AdressgruppeRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.aDRAdressgruppe = function(contentType, pxSessionId, body) {
      return this.aDRAdressgruppeWithHttpInfo(contentType, pxSessionId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * ADR/Adressgruppe/{AdressgruppeNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ADR1Adressgruppe17BAdressgruppeNr7D} and HTTP response
     */
    this.aDRAdressgruppeAdressgruppeNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling aDRAdressgruppeAdressgruppeNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling aDRAdressgruppeAdressgruppeNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = ADR1Adressgruppe17BAdressgruppeNr7D;

      return this.apiClient.callApi(
        '/ADR/Adressgruppe/INTE', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * ADR/Adressgruppe/{AdressgruppeNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ADR1Adressgruppe17BAdressgruppeNr7D}
     */
    this.aDRAdressgruppeAdressgruppeNr = function(contentType, pxSessionId) {
      return this.aDRAdressgruppeAdressgruppeNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * ADR/Kommunikation
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/ADR1KommunikationRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.aDRKommunikationWithHttpInfo = function(contentType, pxSessionId, body) {
      var postBody = body;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling aDRKommunikation");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling aDRKommunikation");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling aDRKommunikation");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/ADR/Kommunikation', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * ADR/Kommunikation
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/ADR1KommunikationRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.aDRKommunikation = function(contentType, pxSessionId, body) {
      return this.aDRKommunikationWithHttpInfo(contentType, pxSessionId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * ADR/Kommunikation/{KommunikationNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.aDRKommunikationKommunikationNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling aDRKommunikationKommunikationNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling aDRKommunikationKommunikationNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/ADR/Kommunikation/1', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * ADR/Kommunikation/{KommunikationNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.aDRKommunikationKommunikationNr = function(contentType, pxSessionId) {
      return this.aDRKommunikationKommunikationNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * ADR/Kontakt
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/ADR1KontaktRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.aDRKontaktWithHttpInfo = function(contentType, pxSessionId, body) {
      var postBody = body;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling aDRKontakt");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling aDRKontakt");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling aDRKontakt");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/ADR/Kontakt', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * ADR/Kontakt
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/ADR1KontaktRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.aDRKontakt = function(contentType, pxSessionId, body) {
      return this.aDRKontaktWithHttpInfo(contentType, pxSessionId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * ADR/Kontakt/{KontaktNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ADR1Kontakt17BKontaktNr7D} and HTTP response
     */
    this.aDRKontaktKontaktNrWithHttpInfo = function(depth, contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'depth' is set
      if (depth === undefined || depth === null) {
        throw new Error("Missing the required parameter 'depth' when calling aDRKontaktKontaktNr");
      }

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling aDRKontaktKontaktNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling aDRKontaktKontaktNr");
      }


      var pathParams = {
      };
      var queryParams = {
        'depth': depth,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = ADR1Kontakt17BKontaktNr7D;

      return this.apiClient.callApi(
        '/ADR/Kontakt/2', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * ADR/Kontakt/{KontaktNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ADR1Kontakt17BKontaktNr7D}
     */
    this.aDRKontaktKontaktNr = function(depth, contentType, pxSessionId) {
      return this.aDRKontaktKontaktNrWithHttpInfo(depth, contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * ADR/Kontakttyp/{KontakttypNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ADR1Kontakttyp17BKontakttypNr7D} and HTTP response
     */
    this.aDRKontakttypKontakttypNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling aDRKontakttypKontakttypNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling aDRKontakttypKontakttypNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = ADR1Kontakttyp17BKontakttypNr7D;

      return this.apiClient.callApi(
        '/ADR/Kontakttyp/DIR', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * ADR/Kontakttyp/{KontakttypNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ADR1Kontakttyp17BKontakttypNr7D}
     */
    this.aDRKontakttypKontakttypNr = function(contentType, pxSessionId) {
      return this.aDRKontakttypKontakttypNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * ADR/Notiz
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/ADR1NotizRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.aDRNotizWithHttpInfo = function(contentType, pxSessionId, body) {
      var postBody = body;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling aDRNotiz");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling aDRNotiz");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling aDRNotiz");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/ADR/Notiz', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * ADR/Notiz
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/ADR1NotizRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.aDRNotiz = function(contentType, pxSessionId, body) {
      return this.aDRNotizWithHttpInfo(contentType, pxSessionId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * ADR/Notiz/{NotizNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ADR1Notiz17BNotizNr7D} and HTTP response
     */
    this.aDRNotizNotizNrWithHttpInfo = function(depth, contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'depth' is set
      if (depth === undefined || depth === null) {
        throw new Error("Missing the required parameter 'depth' when calling aDRNotizNotizNr");
      }

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling aDRNotizNotizNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling aDRNotizNotizNr");
      }


      var pathParams = {
      };
      var queryParams = {
        'depth': depth,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = ADR1Notiz17BNotizNr7D;

      return this.apiClient.callApi(
        '/ADR/Notiz/1', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * ADR/Notiz/{NotizNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ADR1Notiz17BNotizNr7D}
     */
    this.aDRNotizNotizNr = function(depth, contentType, pxSessionId) {
      return this.aDRNotizNotizNrWithHttpInfo(depth, contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * ADR/Notizart/{NotizartNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ADR1Notizart17BNotizartNr7D} and HTTP response
     */
    this.aDRNotizartNotizartNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling aDRNotizartNotizartNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling aDRNotizartNotizartNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = ADR1Notizart17BNotizartNr7D;

      return this.apiClient.callApi(
        '/ADR/Notizart/ALARM', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * ADR/Notizart/{NotizartNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ADR1Notizart17BNotizartNr7D}
     */
    this.aDRNotizartNotizartNr = function(contentType, pxSessionId) {
      return this.aDRNotizartNotizartNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * ADR/Zahlungsart
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/ADR1ZahlungsartRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.aDRZahlungsartWithHttpInfo = function(contentType, pxSessionId, body) {
      var postBody = body;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling aDRZahlungsart");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling aDRZahlungsart");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling aDRZahlungsart");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/ADR/Zahlungsart', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * ADR/Zahlungsart
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/ADR1ZahlungsartRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.aDRZahlungsart = function(contentType, pxSessionId, body) {
      return this.aDRZahlungsartWithHttpInfo(contentType, pxSessionId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * ADR/Zahlungsart/{ZahlungsartNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ADR1Zahlungsart17BZahlungsartNr7D} and HTTP response
     */
    this.aDRZahlungsartZahlungsartNrWithHttpInfo = function(depth, contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'depth' is set
      if (depth === undefined || depth === null) {
        throw new Error("Missing the required parameter 'depth' when calling aDRZahlungsartZahlungsartNr");
      }

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling aDRZahlungsartZahlungsartNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling aDRZahlungsartZahlungsartNr");
      }


      var pathParams = {
      };
      var queryParams = {
        'depth': depth,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = ADR1Zahlungsart17BZahlungsartNr7D;

      return this.apiClient.callApi(
        '/ADR/Zahlungsart/2', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * ADR/Zahlungsart/{ZahlungsartNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ADR1Zahlungsart17BZahlungsartNr7D}
     */
    this.aDRZahlungsartZahlungsartNr = function(depth, contentType, pxSessionId) {
      return this.aDRZahlungsartZahlungsartNrWithHttpInfo(depth, contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
