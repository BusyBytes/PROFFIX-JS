/**
 * PROFFIX REST API Request Sammlung
 * Dies ist eine Request-Sammlung der PROFFIX REST API, welche das PROFFIX REST API Entwicklerhandbuch unter [https://www.proffix.net/entwickler/restapi/handbuch](https://www.proffix.net/entwickler/restapi/handbuch) erg√§nzt.
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/PRO1Auftrag17BAuftragNr7D', 'model/PRO1AuftragRequest', 'model/PRO1Bank17BBankNr7D', 'model/PRO1Belegart17BBelegartNr7D', 'model/PRO1Benutzereinstellung17BBenutzereinstellungNr7D', 'model/PRO1BenutzereinstellungRequest', 'model/PRO1Benutzergruppe17BBenutzergruppeNr7D', 'model/PRO1BerechtigungRequest', 'model/PRO1Buchungstext', 'model/PRO1Datenbank3Fkey3D7BPassword7D', 'model/PRO1Einheit17BEinheitNr7D', 'model/PRO1Einheitsmatrix17BEinheitLager7D', 'model/PRO1Einheitsmatrix17BEinheitLager7D17BEinheitRechnung7D', 'model/PRO1Einstellung17BModul7D17BSection7D', 'model/PRO1Felddefinition17BTabellenname7D17BFeldname7D', 'model/PRO1Funktion17BFunktionNr7D', 'model/PRO1Kondition17BKonditionNr7D', 'model/PRO1Land17BLandNr7D', 'model/PRO1Lieferart17BLieferartNr7D', 'model/PRO1Liste17BListeNr7D', 'model/PRO1Liste17BListeNr7D1Drucker17BDruckerNr7DRequest', 'model/PRO1Liste17BListeNr7D1generierenRequest', 'model/PRO1LoginRequest', 'model/PRO1Mitarbeiter17BMitarbeiterNr7D', 'model/PRO1Mitarbeiter17BMitarbeiterNr7D1BenutzerRequest', 'model/PRO1MitarbeiterRequest', 'model/PRO1Rahmenvertrag17BRahmenvertragNr7D', 'model/PRO1Recht17BModul7D', 'model/PRO1Recht17BModul7D17BForm7D', 'model/PRO1Recht17BModul7D17BForm7D17BMenu7D', 'model/PRO1Region17BRegionNr7D', 'model/PRO1Sprache17BSpracheNr7D', 'model/PRO1Stammdaten', 'model/PRO1Steuercode17BSteuercodeNr7D', 'model/PRO1Vertreter17BVertreterNr7D', 'model/PRO1Waehrung17BWaehrungNr7D', 'model/PRO1Waehrung1Standard', 'model/PRO1Zusatztabelle17BZusatztabellenname7D', 'model/PRO1Zusatztabelle17BZusatztabellenname7D17BSchlC3BCssel7D', 'model/PRO1Zusatztabelle17BZusatztabellenname7DRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/PRO1Auftrag17BAuftragNr7D'), require('../model/PRO1AuftragRequest'), require('../model/PRO1Bank17BBankNr7D'), require('../model/PRO1Belegart17BBelegartNr7D'), require('../model/PRO1Benutzereinstellung17BBenutzereinstellungNr7D'), require('../model/PRO1BenutzereinstellungRequest'), require('../model/PRO1Benutzergruppe17BBenutzergruppeNr7D'), require('../model/PRO1BerechtigungRequest'), require('../model/PRO1Buchungstext'), require('../model/PRO1Datenbank3Fkey3D7BPassword7D'), require('../model/PRO1Einheit17BEinheitNr7D'), require('../model/PRO1Einheitsmatrix17BEinheitLager7D'), require('../model/PRO1Einheitsmatrix17BEinheitLager7D17BEinheitRechnung7D'), require('../model/PRO1Einstellung17BModul7D17BSection7D'), require('../model/PRO1Felddefinition17BTabellenname7D17BFeldname7D'), require('../model/PRO1Funktion17BFunktionNr7D'), require('../model/PRO1Kondition17BKonditionNr7D'), require('../model/PRO1Land17BLandNr7D'), require('../model/PRO1Lieferart17BLieferartNr7D'), require('../model/PRO1Liste17BListeNr7D'), require('../model/PRO1Liste17BListeNr7D1Drucker17BDruckerNr7DRequest'), require('../model/PRO1Liste17BListeNr7D1generierenRequest'), require('../model/PRO1LoginRequest'), require('../model/PRO1Mitarbeiter17BMitarbeiterNr7D'), require('../model/PRO1Mitarbeiter17BMitarbeiterNr7D1BenutzerRequest'), require('../model/PRO1MitarbeiterRequest'), require('../model/PRO1Rahmenvertrag17BRahmenvertragNr7D'), require('../model/PRO1Recht17BModul7D'), require('../model/PRO1Recht17BModul7D17BForm7D'), require('../model/PRO1Recht17BModul7D17BForm7D17BMenu7D'), require('../model/PRO1Region17BRegionNr7D'), require('../model/PRO1Sprache17BSpracheNr7D'), require('../model/PRO1Stammdaten'), require('../model/PRO1Steuercode17BSteuercodeNr7D'), require('../model/PRO1Vertreter17BVertreterNr7D'), require('../model/PRO1Waehrung17BWaehrungNr7D'), require('../model/PRO1Waehrung1Standard'), require('../model/PRO1Zusatztabelle17BZusatztabellenname7D'), require('../model/PRO1Zusatztabelle17BZusatztabellenname7D17BSchlC3BCssel7D'), require('../model/PRO1Zusatztabelle17BZusatztabellenname7DRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.ProffixRestApiRequestSammlung) {
      root.ProffixRestApiRequestSammlung = {};
    }
    root.ProffixRestApiRequestSammlung.PROApi = factory(root.ProffixRestApiRequestSammlung.ApiClient, root.ProffixRestApiRequestSammlung.PRO1Auftrag17BAuftragNr7D, root.ProffixRestApiRequestSammlung.PRO1AuftragRequest, root.ProffixRestApiRequestSammlung.PRO1Bank17BBankNr7D, root.ProffixRestApiRequestSammlung.PRO1Belegart17BBelegartNr7D, root.ProffixRestApiRequestSammlung.PRO1Benutzereinstellung17BBenutzereinstellungNr7D, root.ProffixRestApiRequestSammlung.PRO1BenutzereinstellungRequest, root.ProffixRestApiRequestSammlung.PRO1Benutzergruppe17BBenutzergruppeNr7D, root.ProffixRestApiRequestSammlung.PRO1BerechtigungRequest, root.ProffixRestApiRequestSammlung.PRO1Buchungstext, root.ProffixRestApiRequestSammlung.PRO1Datenbank3Fkey3D7BPassword7D, root.ProffixRestApiRequestSammlung.PRO1Einheit17BEinheitNr7D, root.ProffixRestApiRequestSammlung.PRO1Einheitsmatrix17BEinheitLager7D, root.ProffixRestApiRequestSammlung.PRO1Einheitsmatrix17BEinheitLager7D17BEinheitRechnung7D, root.ProffixRestApiRequestSammlung.PRO1Einstellung17BModul7D17BSection7D, root.ProffixRestApiRequestSammlung.PRO1Felddefinition17BTabellenname7D17BFeldname7D, root.ProffixRestApiRequestSammlung.PRO1Funktion17BFunktionNr7D, root.ProffixRestApiRequestSammlung.PRO1Kondition17BKonditionNr7D, root.ProffixRestApiRequestSammlung.PRO1Land17BLandNr7D, root.ProffixRestApiRequestSammlung.PRO1Lieferart17BLieferartNr7D, root.ProffixRestApiRequestSammlung.PRO1Liste17BListeNr7D, root.ProffixRestApiRequestSammlung.PRO1Liste17BListeNr7D1Drucker17BDruckerNr7DRequest, root.ProffixRestApiRequestSammlung.PRO1Liste17BListeNr7D1generierenRequest, root.ProffixRestApiRequestSammlung.PRO1LoginRequest, root.ProffixRestApiRequestSammlung.PRO1Mitarbeiter17BMitarbeiterNr7D, root.ProffixRestApiRequestSammlung.PRO1Mitarbeiter17BMitarbeiterNr7D1BenutzerRequest, root.ProffixRestApiRequestSammlung.PRO1MitarbeiterRequest, root.ProffixRestApiRequestSammlung.PRO1Rahmenvertrag17BRahmenvertragNr7D, root.ProffixRestApiRequestSammlung.PRO1Recht17BModul7D, root.ProffixRestApiRequestSammlung.PRO1Recht17BModul7D17BForm7D, root.ProffixRestApiRequestSammlung.PRO1Recht17BModul7D17BForm7D17BMenu7D, root.ProffixRestApiRequestSammlung.PRO1Region17BRegionNr7D, root.ProffixRestApiRequestSammlung.PRO1Sprache17BSpracheNr7D, root.ProffixRestApiRequestSammlung.PRO1Stammdaten, root.ProffixRestApiRequestSammlung.PRO1Steuercode17BSteuercodeNr7D, root.ProffixRestApiRequestSammlung.PRO1Vertreter17BVertreterNr7D, root.ProffixRestApiRequestSammlung.PRO1Waehrung17BWaehrungNr7D, root.ProffixRestApiRequestSammlung.PRO1Waehrung1Standard, root.ProffixRestApiRequestSammlung.PRO1Zusatztabelle17BZusatztabellenname7D, root.ProffixRestApiRequestSammlung.PRO1Zusatztabelle17BZusatztabellenname7D17BSchlC3BCssel7D, root.ProffixRestApiRequestSammlung.PRO1Zusatztabelle17BZusatztabellenname7DRequest);
  }
}(this, function(ApiClient, PRO1Auftrag17BAuftragNr7D, PRO1AuftragRequest, PRO1Bank17BBankNr7D, PRO1Belegart17BBelegartNr7D, PRO1Benutzereinstellung17BBenutzereinstellungNr7D, PRO1BenutzereinstellungRequest, PRO1Benutzergruppe17BBenutzergruppeNr7D, PRO1BerechtigungRequest, PRO1Buchungstext, PRO1Datenbank3Fkey3D7BPassword7D, PRO1Einheit17BEinheitNr7D, PRO1Einheitsmatrix17BEinheitLager7D, PRO1Einheitsmatrix17BEinheitLager7D17BEinheitRechnung7D, PRO1Einstellung17BModul7D17BSection7D, PRO1Felddefinition17BTabellenname7D17BFeldname7D, PRO1Funktion17BFunktionNr7D, PRO1Kondition17BKonditionNr7D, PRO1Land17BLandNr7D, PRO1Lieferart17BLieferartNr7D, PRO1Liste17BListeNr7D, PRO1Liste17BListeNr7D1Drucker17BDruckerNr7DRequest, PRO1Liste17BListeNr7D1generierenRequest, PRO1LoginRequest, PRO1Mitarbeiter17BMitarbeiterNr7D, PRO1Mitarbeiter17BMitarbeiterNr7D1BenutzerRequest, PRO1MitarbeiterRequest, PRO1Rahmenvertrag17BRahmenvertragNr7D, PRO1Recht17BModul7D, PRO1Recht17BModul7D17BForm7D, PRO1Recht17BModul7D17BForm7D17BMenu7D, PRO1Region17BRegionNr7D, PRO1Sprache17BSpracheNr7D, PRO1Stammdaten, PRO1Steuercode17BSteuercodeNr7D, PRO1Vertreter17BVertreterNr7D, PRO1Waehrung17BWaehrungNr7D, PRO1Waehrung1Standard, PRO1Zusatztabelle17BZusatztabellenname7D, PRO1Zusatztabelle17BZusatztabellenname7D17BSchlC3BCssel7D, PRO1Zusatztabelle17BZusatztabellenname7DRequest) {
  'use strict';

  /**
   * PRO service.
   * @module api/PROApi
   * @version 1.0
   */

  /**
   * Constructs a new PROApi. 
   * @alias module:api/PROApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * PRO/Auftrag
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/PRO1AuftragRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.pROAuftragWithHttpInfo = function(contentType, pxSessionId, body) {
      var postBody = body;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling pROAuftrag");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling pROAuftrag");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling pROAuftrag");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/PRO/Auftrag', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * PRO/Auftrag
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/PRO1AuftragRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.pROAuftrag = function(contentType, pxSessionId, body) {
      return this.pROAuftragWithHttpInfo(contentType, pxSessionId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * PRO/Auftrag/{AuftragNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PRO1Auftrag17BAuftragNr7D} and HTTP response
     */
    this.pROAuftragAuftragNrWithHttpInfo = function(depth, contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'depth' is set
      if (depth === undefined || depth === null) {
        throw new Error("Missing the required parameter 'depth' when calling pROAuftragAuftragNr");
      }

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling pROAuftragAuftragNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling pROAuftragAuftragNr");
      }


      var pathParams = {
      };
      var queryParams = {
        'depth': depth,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = PRO1Auftrag17BAuftragNr7D;

      return this.apiClient.callApi(
        '/PRO/Auftrag/1', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * PRO/Auftrag/{AuftragNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PRO1Auftrag17BAuftragNr7D}
     */
    this.pROAuftragAuftragNr = function(depth, contentType, pxSessionId) {
      return this.pROAuftragAuftragNrWithHttpInfo(depth, contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * PRO/Bank/{BankNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PRO1Bank17BBankNr7D} and HTTP response
     */
    this.pROBankBankNrWithHttpInfo = function(depth, contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'depth' is set
      if (depth === undefined || depth === null) {
        throw new Error("Missing the required parameter 'depth' when calling pROBankBankNr");
      }

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling pROBankBankNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling pROBankBankNr");
      }


      var pathParams = {
      };
      var queryParams = {
        'depth': depth,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = PRO1Bank17BBankNr7D;

      return this.apiClient.callApi(
        '/PRO/Bank/1', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * PRO/Bank/{BankNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PRO1Bank17BBankNr7D}
     */
    this.pROBankBankNr = function(depth, contentType, pxSessionId) {
      return this.pROBankBankNrWithHttpInfo(depth, contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * PRO/Belegart/{BelegartNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PRO1Belegart17BBelegartNr7D} and HTTP response
     */
    this.pROBelegartBelegartNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling pROBelegartBelegartNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling pROBelegartBelegartNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = PRO1Belegart17BBelegartNr7D;

      return this.apiClient.callApi(
        '/PRO/Belegart/AB', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * PRO/Belegart/{BelegartNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PRO1Belegart17BBelegartNr7D}
     */
    this.pROBelegartBelegartNr = function(contentType, pxSessionId) {
      return this.pROBelegartBelegartNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * PRO/Benutzereinstellung
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/PRO1BenutzereinstellungRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.pROBenutzereinstellungWithHttpInfo = function(contentType, pxSessionId, body) {
      var postBody = body;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling pROBenutzereinstellung");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling pROBenutzereinstellung");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling pROBenutzereinstellung");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/PRO/Benutzereinstellung', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * PRO/Benutzereinstellung
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/PRO1BenutzereinstellungRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.pROBenutzereinstellung = function(contentType, pxSessionId, body) {
      return this.pROBenutzereinstellungWithHttpInfo(contentType, pxSessionId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * PRO/Benutzereinstellung/{BenutzereinstellungNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PRO1Benutzereinstellung17BBenutzereinstellungNr7D} and HTTP response
     */
    this.pROBenutzereinstellungBenutzereinstellungNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling pROBenutzereinstellungBenutzereinstellungNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling pROBenutzereinstellungBenutzereinstellungNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = PRO1Benutzereinstellung17BBenutzereinstellungNr7D;

      return this.apiClient.callApi(
        '/PRO/Benutzereinstellung/Test', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * PRO/Benutzereinstellung/{BenutzereinstellungNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PRO1Benutzereinstellung17BBenutzereinstellungNr7D}
     */
    this.pROBenutzereinstellungBenutzereinstellungNr = function(contentType, pxSessionId) {
      return this.pROBenutzereinstellungBenutzereinstellungNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * PRO/Benutzergruppe/{BenutzergruppeNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PRO1Benutzergruppe17BBenutzergruppeNr7D} and HTTP response
     */
    this.pROBenutzergruppeBenutzergruppeNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling pROBenutzergruppeBenutzergruppeNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling pROBenutzergruppeBenutzergruppeNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = PRO1Benutzergruppe17BBenutzergruppeNr7D;

      return this.apiClient.callApi(
        '/PRO/Benutzergruppe/ADMIN', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * PRO/Benutzergruppe/{BenutzergruppeNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PRO1Benutzergruppe17BBenutzergruppeNr7D}
     */
    this.pROBenutzergruppeBenutzergruppeNr = function(contentType, pxSessionId) {
      return this.pROBenutzergruppeBenutzergruppeNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * PRO/Berechtigung
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/PRO1BerechtigungRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.pROBerechtigungWithHttpInfo = function(contentType, pxSessionId, body) {
      var postBody = body;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling pROBerechtigung");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling pROBerechtigung");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling pROBerechtigung");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/PRO/Berechtigung', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * PRO/Berechtigung
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/PRO1BerechtigungRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.pROBerechtigung = function(contentType, pxSessionId, body) {
      return this.pROBerechtigungWithHttpInfo(contentType, pxSessionId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * PRO/Berechtigung/{BerechtigungNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.pROBerechtigungBerechtigungNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling pROBerechtigungBerechtigungNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling pROBerechtigungBerechtigungNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/PRO/Berechtigung/5885', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * PRO/Berechtigung/{BerechtigungNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.pROBerechtigungBerechtigungNr = function(contentType, pxSessionId) {
      return this.pROBerechtigungBerechtigungNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * PRO/Briefanrede/{BriefanredeNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.pROBriefanredeBriefanredeNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling pROBriefanredeBriefanredeNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling pROBriefanredeBriefanredeNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/PRO/Briefanrede/1', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * PRO/Briefanrede/{BriefanredeNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.pROBriefanredeBriefanredeNr = function(contentType, pxSessionId) {
      return this.pROBriefanredeBriefanredeNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * PRO/Buchungstext
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PRO1Buchungstext>} and HTTP response
     */
    this.pROBuchungstextWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling pROBuchungstext");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling pROBuchungstext");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = [PRO1Buchungstext];

      return this.apiClient.callApi(
        '/PRO/Buchungstext', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * PRO/Buchungstext
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PRO1Buchungstext>}
     */
    this.pROBuchungstext = function(contentType, pxSessionId) {
      return this.pROBuchungstextWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * PRO/Datei
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {File} file 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.pRODateiWithHttpInfo = function(contentType, pxSessionId, file) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling pRODatei");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling pRODatei");
      }

      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling pRODatei");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
        'File': file
      };

      var authNames = [];
      var contentTypes = ['application/octet-stream'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/PRO/Datei', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * PRO/Datei
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {File} file 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.pRODatei = function(contentType, pxSessionId, file) {
      return this.pRODateiWithHttpInfo(contentType, pxSessionId, file)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * PRO/Datei/{DateiNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.pRODateiDateiNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling pRODateiDateiNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling pRODateiDateiNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/PRO/Datei/nsDznl0xSe4O9JXzDHA-Z_yQA3WWNivrjo2SyJL4yTpky1sZuTHjftyedVi_pO1F5ZlThroG0fMxxZOg_KgOWwLh31jnvfpjykU19-m_GzE', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * PRO/Datei/{DateiNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.pRODateiDateiNr = function(contentType, pxSessionId) {
      return this.pRODateiDateiNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * PRO/Datenbank?key&#x3D;{Password}
     * @param {String} key 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PRO1Datenbank3Fkey3D7BPassword7D>} and HTTP response
     */
    this.pRODatenbankkeyPasswordWithHttpInfo = function(key, contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling pRODatenbankkeyPassword");
      }

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling pRODatenbankkeyPassword");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling pRODatenbankkeyPassword");
      }


      var pathParams = {
      };
      var queryParams = {
        'key': key,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = [PRO1Datenbank3Fkey3D7BPassword7D];

      return this.apiClient.callApi(
        '/PRO/Datenbank', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * PRO/Datenbank?key&#x3D;{Password}
     * @param {String} key 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PRO1Datenbank3Fkey3D7BPassword7D>}
     */
    this.pRODatenbankkeyPassword = function(key, contentType, pxSessionId) {
      return this.pRODatenbankkeyPasswordWithHttpInfo(key, contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * PRO/Drucker/{DruckerNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.pRODruckerDruckerNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling pRODruckerDruckerNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling pRODruckerDruckerNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/PRO/Drucker/e16c568058e994d7a0bb27219e48e11e8b87d0c5dd79e7d8805b9ffd6f0ef649', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * PRO/Drucker/{DruckerNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.pRODruckerDruckerNr = function(contentType, pxSessionId) {
      return this.pRODruckerDruckerNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * PRO/Einheit/{EinheitNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PRO1Einheit17BEinheitNr7D} and HTTP response
     */
    this.pROEinheitEinheitNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling pROEinheitEinheitNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling pROEinheitEinheitNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = PRO1Einheit17BEinheitNr7D;

      return this.apiClient.callApi(
        '/PRO/Einheit/STK', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * PRO/Einheit/{EinheitNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PRO1Einheit17BEinheitNr7D}
     */
    this.pROEinheitEinheitNr = function(contentType, pxSessionId) {
      return this.pROEinheitEinheitNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * PRO/Einheitsmatrix/{EinheitLager}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PRO1Einheitsmatrix17BEinheitLager7D>} and HTTP response
     */
    this.pROEinheitsmatrixEinheitLagerWithHttpInfo = function(depth, contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'depth' is set
      if (depth === undefined || depth === null) {
        throw new Error("Missing the required parameter 'depth' when calling pROEinheitsmatrixEinheitLager");
      }

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling pROEinheitsmatrixEinheitLager");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling pROEinheitsmatrixEinheitLager");
      }


      var pathParams = {
      };
      var queryParams = {
        'depth': depth,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = [PRO1Einheitsmatrix17BEinheitLager7D];

      return this.apiClient.callApi(
        '/PRO/Einheitsmatrix/STK', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * PRO/Einheitsmatrix/{EinheitLager}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PRO1Einheitsmatrix17BEinheitLager7D>}
     */
    this.pROEinheitsmatrixEinheitLager = function(depth, contentType, pxSessionId) {
      return this.pROEinheitsmatrixEinheitLagerWithHttpInfo(depth, contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * PRO/Einheitsmatrix/{EinheitLager}/{EinheitRechnung}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PRO1Einheitsmatrix17BEinheitLager7D17BEinheitRechnung7D} and HTTP response
     */
    this.pROEinheitsmatrixEinheitLagerEinheitRechnungWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling pROEinheitsmatrixEinheitLagerEinheitRechnung");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling pROEinheitsmatrixEinheitLagerEinheitRechnung");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = PRO1Einheitsmatrix17BEinheitLager7D17BEinheitRechnung7D;

      return this.apiClient.callApi(
        '/PRO/Einheitsmatrix/STK/M2', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * PRO/Einheitsmatrix/{EinheitLager}/{EinheitRechnung}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PRO1Einheitsmatrix17BEinheitLager7D17BEinheitRechnung7D}
     */
    this.pROEinheitsmatrixEinheitLagerEinheitRechnung = function(contentType, pxSessionId) {
      return this.pROEinheitsmatrixEinheitLagerEinheitRechnungWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * PRO/Einstellung/{Modul}/{Section}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PRO1Einstellung17BModul7D17BSection7D} and HTTP response
     */
    this.pROEinstellungModulSectionWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling pROEinstellungModulSection");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling pROEinstellungModulSection");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = PRO1Einstellung17BModul7D17BSection7D;

      return this.apiClient.callApi(
        '/PRO/Einstellung/PXSTUNDEN/DefRapportMobile', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * PRO/Einstellung/{Modul}/{Section}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PRO1Einstellung17BModul7D17BSection7D}
     */
    this.pROEinstellungModulSection = function(contentType, pxSessionId) {
      return this.pROEinstellungModulSectionWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * PRO/Feiertag/{FeiertagNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.pROFeiertagFeiertagNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling pROFeiertagFeiertagNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling pROFeiertagFeiertagNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/PRO/Feiertag/1', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * PRO/Feiertag/{FeiertagNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.pROFeiertagFeiertagNr = function(contentType, pxSessionId) {
      return this.pROFeiertagFeiertagNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * PRO/Felddefinition
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.pROFelddefinitionWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * PRO/Felddefinition
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.pROFelddefinition = function() {
      return this.pROFelddefinitionWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * PRO/Felddefinition/{Tabellenname}/{Feldname}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PRO1Felddefinition17BTabellenname7D17BFeldname7D} and HTTP response
     */
    this.pROFelddefinitionTabellennameFeldnameWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling pROFelddefinitionTabellennameFeldname");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling pROFelddefinitionTabellennameFeldname");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = PRO1Felddefinition17BTabellenname7D17BFeldname7D;

      return this.apiClient.callApi(
        '/PRO/Felddefinition/ADR_AdressDef/AuftErtrag', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * PRO/Felddefinition/{Tabellenname}/{Feldname}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PRO1Felddefinition17BTabellenname7D17BFeldname7D}
     */
    this.pROFelddefinitionTabellennameFeldname = function(contentType, pxSessionId) {
      return this.pROFelddefinitionTabellennameFeldnameWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * PRO/Funktion/{FunktionNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PRO1Funktion17BFunktionNr7D} and HTTP response
     */
    this.pROFunktionFunktionNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling pROFunktionFunktionNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling pROFunktionFunktionNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = PRO1Funktion17BFunktionNr7D;

      return this.apiClient.callApi(
        '/PRO/Funktion/1', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * PRO/Funktion/{FunktionNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PRO1Funktion17BFunktionNr7D}
     */
    this.pROFunktionFunktionNr = function(contentType, pxSessionId) {
      return this.pROFunktionFunktionNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * PRO/Info
     * @param {String} key 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.pROInfoWithHttpInfo = function(key, contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling pROInfo");
      }

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling pROInfo");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling pROInfo");
      }


      var pathParams = {
      };
      var queryParams = {
        'key': key,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/PRO/Info', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * PRO/Info
     * @param {String} key 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.pROInfo = function(key, contentType, pxSessionId) {
      return this.pROInfoWithHttpInfo(key, contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * PRO/Kondition/{KonditionNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PRO1Kondition17BKonditionNr7D} and HTTP response
     */
    this.pROKonditionKonditionNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling pROKonditionKonditionNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling pROKonditionKonditionNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = PRO1Kondition17BKonditionNr7D;

      return this.apiClient.callApi(
        '/PRO/Kondition/1', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * PRO/Kondition/{KonditionNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PRO1Kondition17BKonditionNr7D}
     */
    this.pROKonditionKonditionNr = function(contentType, pxSessionId) {
      return this.pROKonditionKonditionNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * PRO/Land/{LandNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PRO1Land17BLandNr7D} and HTTP response
     */
    this.pROLandLandNrWithHttpInfo = function(depth, contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'depth' is set
      if (depth === undefined || depth === null) {
        throw new Error("Missing the required parameter 'depth' when calling pROLandLandNr");
      }

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling pROLandLandNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling pROLandLandNr");
      }


      var pathParams = {
      };
      var queryParams = {
        'depth': depth,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = PRO1Land17BLandNr7D;

      return this.apiClient.callApi(
        '/PRO/Land/CH', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * PRO/Land/{LandNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PRO1Land17BLandNr7D}
     */
    this.pROLandLandNr = function(depth, contentType, pxSessionId) {
      return this.pROLandLandNrWithHttpInfo(depth, contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * PRO/Lieferart/{LieferartNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PRO1Lieferart17BLieferartNr7D} and HTTP response
     */
    this.pROLieferartLieferartNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling pROLieferartLieferartNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling pROLieferartLieferartNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = PRO1Lieferart17BLieferartNr7D;

      return this.apiClient.callApi(
        '/PRO/Lieferart/Kurier', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * PRO/Lieferart/{LieferartNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PRO1Lieferart17BLieferartNr7D}
     */
    this.pROLieferartLieferartNr = function(contentType, pxSessionId) {
      return this.pROLieferartLieferartNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * PRO/Liste/{ListeNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PRO1Liste17BListeNr7D} and HTTP response
     */
    this.pROListeListeNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling pROListeListeNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling pROListeListeNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = PRO1Liste17BListeNr7D;

      return this.apiClient.callApi(
        '/PRO/Liste/2376', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * PRO/Liste/{ListeNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PRO1Liste17BListeNr7D}
     */
    this.pROListeListeNr = function(contentType, pxSessionId) {
      return this.pROListeListeNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * PRO/Liste/{ListeNr}/Dokument/{DokumentNr}/zugferdgenerieren
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.pROListeListeNrDokumentDokumentNrzugferdgenerierenWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling pROListeListeNrDokumentDokumentNrzugferdgenerieren");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling pROListeListeNrDokumentDokumentNrzugferdgenerieren");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/PRO/Liste/13030/Dokument/600028/zugferdgenerieren', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * PRO/Liste/{ListeNr}/Dokument/{DokumentNr}/zugferdgenerieren
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.pROListeListeNrDokumentDokumentNrzugferdgenerieren = function(contentType, pxSessionId) {
      return this.pROListeListeNrDokumentDokumentNrzugferdgenerierenWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * PRO/Liste/{ListeNr}/Drucker/{DruckerNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/PRO1Liste17BListeNr7D1Drucker17BDruckerNr7DRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.pROListeListeNrDruckerDruckerNrWithHttpInfo = function(contentType, pxSessionId, body) {
      var postBody = body;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling pROListeListeNrDruckerDruckerNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling pROListeListeNrDruckerDruckerNr");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling pROListeListeNrDruckerDruckerNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/PRO/Liste/12869/Drucker/e16c568058e994d7a0bb27219e48e11e8b87d0c5dd79e7d8805b9ffd6f0ef649/drucken', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * PRO/Liste/{ListeNr}/Drucker/{DruckerNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/PRO1Liste17BListeNr7D1Drucker17BDruckerNr7DRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.pROListeListeNrDruckerDruckerNr = function(contentType, pxSessionId, body) {
      return this.pROListeListeNrDruckerDruckerNrWithHttpInfo(contentType, pxSessionId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * PRO/Liste/{ListeNr}/generieren
     * als Body mindestens ein leeres JSON Object senden &#x3D; {}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/PRO1Liste17BListeNr7D1generierenRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.pROListeListeNrgenerierenWithHttpInfo = function(contentType, pxSessionId, body) {
      var postBody = body;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling pROListeListeNrgenerieren");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling pROListeListeNrgenerieren");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling pROListeListeNrgenerieren");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/PRO/Liste/2376/generieren', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * PRO/Liste/{ListeNr}/generieren
     * als Body mindestens ein leeres JSON Object senden &#x3D; {}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/PRO1Liste17BListeNr7D1generierenRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.pROListeListeNrgenerieren = function(contentType, pxSessionId, body) {
      return this.pROListeListeNrgenerierenWithHttpInfo(contentType, pxSessionId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * PRO/Login
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/PRO1LoginRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.pROLoginWithHttpInfo = function(contentType, pxSessionId, body) {
      var postBody = body;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling pROLogin");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling pROLogin");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling pROLogin");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/PRO/Login', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * PRO/Login
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/PRO1LoginRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.pROLogin = function(contentType, pxSessionId, body) {
      return this.pROLoginWithHttpInfo(contentType, pxSessionId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * PRO/Mitarbeiter
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/PRO1MitarbeiterRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.pROMitarbeiterWithHttpInfo = function(contentType, pxSessionId, body) {
      var postBody = body;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling pROMitarbeiter");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling pROMitarbeiter");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling pROMitarbeiter");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/PRO/Mitarbeiter', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * PRO/Mitarbeiter
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/PRO1MitarbeiterRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.pROMitarbeiter = function(contentType, pxSessionId, body) {
      return this.pROMitarbeiterWithHttpInfo(contentType, pxSessionId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * PRO/Mitarbeiter/{MitarbeiterNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PRO1Mitarbeiter17BMitarbeiterNr7D} and HTTP response
     */
    this.pROMitarbeiterMitarbeiterNrWithHttpInfo = function(depth, contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'depth' is set
      if (depth === undefined || depth === null) {
        throw new Error("Missing the required parameter 'depth' when calling pROMitarbeiterMitarbeiterNr");
      }

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling pROMitarbeiterMitarbeiterNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling pROMitarbeiterMitarbeiterNr");
      }


      var pathParams = {
      };
      var queryParams = {
        'depth': depth,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = PRO1Mitarbeiter17BMitarbeiterNr7D;

      return this.apiClient.callApi(
        '/PRO/Mitarbeiter/1', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * PRO/Mitarbeiter/{MitarbeiterNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PRO1Mitarbeiter17BMitarbeiterNr7D}
     */
    this.pROMitarbeiterMitarbeiterNr = function(depth, contentType, pxSessionId) {
      return this.pROMitarbeiterMitarbeiterNrWithHttpInfo(depth, contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * PRO/Mitarbeiter/{MitarbeiterNr}/Benutzer
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/PRO1Mitarbeiter17BMitarbeiterNr7D1BenutzerRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.pROMitarbeiterMitarbeiterNrBenutzerWithHttpInfo = function(contentType, pxSessionId, body) {
      var postBody = body;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling pROMitarbeiterMitarbeiterNrBenutzer");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling pROMitarbeiterMitarbeiterNrBenutzer");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling pROMitarbeiterMitarbeiterNrBenutzer");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/PRO/Mitarbeiter/1/Benutzer', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * PRO/Mitarbeiter/{MitarbeiterNr}/Benutzer
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/PRO1Mitarbeiter17BMitarbeiterNr7D1BenutzerRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.pROMitarbeiterMitarbeiterNrBenutzer = function(contentType, pxSessionId, body) {
      return this.pROMitarbeiterMitarbeiterNrBenutzerWithHttpInfo(contentType, pxSessionId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * PRO/Rahmenvertrag/{RahmenvertragNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PRO1Rahmenvertrag17BRahmenvertragNr7D} and HTTP response
     */
    this.pRORahmenvertragRahmenvertragNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling pRORahmenvertragRahmenvertragNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling pRORahmenvertragRahmenvertragNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = PRO1Rahmenvertrag17BRahmenvertragNr7D;

      return this.apiClient.callApi(
        '/PRO/Rahmenvertrag/1', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * PRO/Rahmenvertrag/{RahmenvertragNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PRO1Rahmenvertrag17BRahmenvertragNr7D}
     */
    this.pRORahmenvertragRahmenvertragNr = function(contentType, pxSessionId) {
      return this.pRORahmenvertragRahmenvertragNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * PRO/Recht/{Modul}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PRO1Recht17BModul7D>} and HTTP response
     */
    this.pRORechtModulWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling pRORechtModul");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling pRORechtModul");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = [PRO1Recht17BModul7D];

      return this.apiClient.callApi(
        '/PRO/Recht/PXRESOURCE', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * PRO/Recht/{Modul}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PRO1Recht17BModul7D>}
     */
    this.pRORechtModul = function(contentType, pxSessionId) {
      return this.pRORechtModulWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * PRO/Recht/{Modul}/{Form}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PRO1Recht17BModul7D17BForm7D>} and HTTP response
     */
    this.pRORechtModulFormWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling pRORechtModulForm");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling pRORechtModulForm");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = [PRO1Recht17BModul7D17BForm7D];

      return this.apiClient.callApi(
        '/PRO/Recht/PXRESOURCE/FRMHAUPT', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * PRO/Recht/{Modul}/{Form}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PRO1Recht17BModul7D17BForm7D>}
     */
    this.pRORechtModulForm = function(contentType, pxSessionId) {
      return this.pRORechtModulFormWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * PRO/Recht/{Modul}/{Form}/{Menu}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PRO1Recht17BModul7D17BForm7D17BMenu7D} and HTTP response
     */
    this.pRORechtModulFormMenuWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling pRORechtModulFormMenu");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling pRORechtModulFormMenu");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = PRO1Recht17BModul7D17BForm7D17BMenu7D;

      return this.apiClient.callApi(
        '/PRO/Recht/PXRESOURCE/FRMHAUPT/KALENDER', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * PRO/Recht/{Modul}/{Form}/{Menu}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PRO1Recht17BModul7D17BForm7D17BMenu7D}
     */
    this.pRORechtModulFormMenu = function(contentType, pxSessionId) {
      return this.pRORechtModulFormMenuWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * PRO/Region/{RegionNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PRO1Region17BRegionNr7D} and HTTP response
     */
    this.pRORegionRegionNrWithHttpInfo = function(depth, contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'depth' is set
      if (depth === undefined || depth === null) {
        throw new Error("Missing the required parameter 'depth' when calling pRORegionRegionNr");
      }

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling pRORegionRegionNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling pRORegionRegionNr");
      }


      var pathParams = {
      };
      var queryParams = {
        'depth': depth,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = PRO1Region17BRegionNr7D;

      return this.apiClient.callApi(
        '/PRO/Region/SG', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * PRO/Region/{RegionNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PRO1Region17BRegionNr7D}
     */
    this.pRORegionRegionNr = function(depth, contentType, pxSessionId) {
      return this.pRORegionRegionNrWithHttpInfo(depth, contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * PRO/SollstundenplanHistory/{SollstundenplanHistoryNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.pROSollstundenplanHistorySollstundenplanHistoryNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling pROSollstundenplanHistorySollstundenplanHistoryNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling pROSollstundenplanHistorySollstundenplanHistoryNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/PRO/SollstundenplanHistory/1', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * PRO/SollstundenplanHistory/{SollstundenplanHistoryNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.pROSollstundenplanHistorySollstundenplanHistoryNr = function(contentType, pxSessionId) {
      return this.pROSollstundenplanHistorySollstundenplanHistoryNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * PRO/Sollstundenplan/{SollstundenplanNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.pROSollstundenplanSollstundenplanNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling pROSollstundenplanSollstundenplanNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling pROSollstundenplanSollstundenplanNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/PRO/Sollstundenplan/1', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * PRO/Sollstundenplan/{SollstundenplanNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.pROSollstundenplanSollstundenplanNr = function(contentType, pxSessionId) {
      return this.pROSollstundenplanSollstundenplanNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * PRO/Sprache/{SpracheNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PRO1Sprache17BSpracheNr7D} and HTTP response
     */
    this.pROSpracheSpracheNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling pROSpracheSpracheNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling pROSpracheSpracheNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = PRO1Sprache17BSpracheNr7D;

      return this.apiClient.callApi(
        '/PRO/Sprache/D', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * PRO/Sprache/{SpracheNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PRO1Sprache17BSpracheNr7D}
     */
    this.pROSpracheSpracheNr = function(contentType, pxSessionId) {
      return this.pROSpracheSpracheNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * PRO/Stammdaten
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PRO1Stammdaten} and HTTP response
     */
    this.pROStammdatenWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling pROStammdaten");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling pROStammdaten");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = PRO1Stammdaten;

      return this.apiClient.callApi(
        '/PRO/Stammdaten', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * PRO/Stammdaten
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PRO1Stammdaten}
     */
    this.pROStammdaten = function(contentType, pxSessionId) {
      return this.pROStammdatenWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * PRO/Steuercode/{SteuercodeNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PRO1Steuercode17BSteuercodeNr7D} and HTTP response
     */
    this.pROSteuercodeSteuercodeNrWithHttpInfo = function(depth, contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'depth' is set
      if (depth === undefined || depth === null) {
        throw new Error("Missing the required parameter 'depth' when calling pROSteuercodeSteuercodeNr");
      }

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling pROSteuercodeSteuercodeNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling pROSteuercodeSteuercodeNr");
      }


      var pathParams = {
      };
      var queryParams = {
        'depth': depth,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = PRO1Steuercode17BSteuercodeNr7D;

      return this.apiClient.callApi(
        '/PRO/Steuercode/1', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * PRO/Steuercode/{SteuercodeNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PRO1Steuercode17BSteuercodeNr7D}
     */
    this.pROSteuercodeSteuercodeNr = function(depth, contentType, pxSessionId) {
      return this.pROSteuercodeSteuercodeNrWithHttpInfo(depth, contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * PRO/Vertreter/{VertreterNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PRO1Vertreter17BVertreterNr7D} and HTTP response
     */
    this.pROVertreterVertreterNrWithHttpInfo = function(depth, contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'depth' is set
      if (depth === undefined || depth === null) {
        throw new Error("Missing the required parameter 'depth' when calling pROVertreterVertreterNr");
      }

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling pROVertreterVertreterNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling pROVertreterVertreterNr");
      }


      var pathParams = {
      };
      var queryParams = {
        'depth': depth,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = PRO1Vertreter17BVertreterNr7D;

      return this.apiClient.callApi(
        '/PRO/Vertreter/FV', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * PRO/Vertreter/{VertreterNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PRO1Vertreter17BVertreterNr7D}
     */
    this.pROVertreterVertreterNr = function(depth, contentType, pxSessionId) {
      return this.pROVertreterVertreterNrWithHttpInfo(depth, contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * PRO/Waehrung/Standard
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PRO1Waehrung1Standard} and HTTP response
     */
    this.pROWaehrungStandardWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling pROWaehrungStandard");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling pROWaehrungStandard");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = PRO1Waehrung1Standard;

      return this.apiClient.callApi(
        '/PRO/Waehrung/Standard', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * PRO/Waehrung/Standard
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PRO1Waehrung1Standard}
     */
    this.pROWaehrungStandard = function(contentType, pxSessionId) {
      return this.pROWaehrungStandardWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * PRO/Waehrung/{WaehrungNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PRO1Waehrung17BWaehrungNr7D} and HTTP response
     */
    this.pROWaehrungWaehrungNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling pROWaehrungWaehrungNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling pROWaehrungWaehrungNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = PRO1Waehrung17BWaehrungNr7D;

      return this.apiClient.callApi(
        '/PRO/Waehrung/CHF', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * PRO/Waehrung/{WaehrungNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PRO1Waehrung17BWaehrungNr7D}
     */
    this.pROWaehrungWaehrungNr = function(contentType, pxSessionId) {
      return this.pROWaehrungWaehrungNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * PRO/Waehrung/kurseaktualisieren
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.pROWaehrungkurseaktualisierenWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling pROWaehrungkurseaktualisieren");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling pROWaehrungkurseaktualisieren");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/PRO/Waehrung/kurseaktualisieren', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * PRO/Waehrung/kurseaktualisieren
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.pROWaehrungkurseaktualisieren = function(contentType, pxSessionId) {
      return this.pROWaehrungkurseaktualisierenWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * PRO/Zusatztabelle/{Zusatztabellenname}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PRO1Zusatztabelle17BZusatztabellenname7D>} and HTTP response
     */
    this.pROZusatztabelleZusatztabellennameWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling pROZusatztabelleZusatztabellenname");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling pROZusatztabelleZusatztabellenname");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = [PRO1Zusatztabelle17BZusatztabellenname7D];

      return this.apiClient.callApi(
        '/PRO/Zusatztabelle/ZUS_DVD_Sammlung', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * PRO/Zusatztabelle/{Zusatztabellenname}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PRO1Zusatztabelle17BZusatztabellenname7D>}
     */
    this.pROZusatztabelleZusatztabellenname = function(contentType, pxSessionId) {
      return this.pROZusatztabelleZusatztabellennameWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * PRO/Zusatztabelle/{Zusatztabellenname}/{Schl√ºssel}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PRO1Zusatztabelle17BZusatztabellenname7D17BSchlC3BCssel7D} and HTTP response
     */
    this.pROZusatztabelleZusatztabellennameSchlsselWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling pROZusatztabelleZusatztabellennameSchlssel");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling pROZusatztabelleZusatztabellennameSchlssel");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = PRO1Zusatztabelle17BZusatztabellenname7D17BSchlC3BCssel7D;

      return this.apiClient.callApi(
        '/PRO/Zusatztabelle/ZUS_DVD_Sammlung/1', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * PRO/Zusatztabelle/{Zusatztabellenname}/{Schl√ºssel}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PRO1Zusatztabelle17BZusatztabellenname7D17BSchlC3BCssel7D}
     */
    this.pROZusatztabelleZusatztabellennameSchlssel = function(contentType, pxSessionId) {
      return this.pROZusatztabelleZusatztabellennameSchlsselWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * PRO/Zusatztabelle/{Zusatztabellenname}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/PRO1Zusatztabelle17BZusatztabellenname7DRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.postPROZusatztabelleZusatztabellennameWithHttpInfo = function(contentType, pxSessionId, body) {
      var postBody = body;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling postPROZusatztabelleZusatztabellenname");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling postPROZusatztabelleZusatztabellenname");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postPROZusatztabelleZusatztabellenname");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/PRO/Zusatztabelle/ZUS_DVD_Sammlung/1', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * PRO/Zusatztabelle/{Zusatztabellenname}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/PRO1Zusatztabelle17BZusatztabellenname7DRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.postPROZusatztabelleZusatztabellenname = function(contentType, pxSessionId, body) {
      return this.postPROZusatztabelleZusatztabellennameWithHttpInfo(contentType, pxSessionId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
