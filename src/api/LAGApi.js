/**
 * PROFFIX REST API Request Sammlung
 * Dies ist eine Request-Sammlung der PROFFIX REST API, welche das PROFFIX REST API Entwicklerhandbuch unter [https://www.proffix.net/entwickler/restapi/handbuch](https://www.proffix.net/entwickler/restapi/handbuch) erg√§nzt.
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/LAG1Artikel17BArtikelNr7D', 'model/LAG1Artikel17BArtikelNr7D1eingangbuchenRequest', 'model/LAG1Artikel17BArtikelNr7D1inventurbuchenRequest', 'model/LAG1Artikel17BArtikelNr7D1verschiebungbuchenRequest', 'model/LAG1ArtikelRequest', 'model/LAG1ArtikelbildRequest', 'model/LAG1ArtikeldokumentRequest', 'model/LAG1Artikelgruppe17BArtikelgruppeNr7D', 'model/LAG1Artikelklasse17BArtikelklasseNr7D', 'model/LAG1ArtikeloptionRequest', 'model/LAG1ArtikeltextRequest', 'model/LAG1Artikeluntergruppe17BArtikeluntergruppeNr7D', 'model/LAG1Bestand', 'model/LAG1BestellvorschlagRequest', 'model/LAG1Charge17BChargeNr7D', 'model/LAG1ChargeRequest', 'model/LAG1Hersteller17BHerstellerNr7D', 'model/LAG1HerstellerRequest', 'model/LAG1Lagerort17BLagerortNr7D', 'model/LAG1Lieferant17BLieferantNr7D', 'model/LAG1LieferantRequest', 'model/LAG1Notiz17BNotizNr7D', 'model/LAG1NotizRequest', 'model/LAG1Notizart17BNotizartNr7D', 'model/LAG1Sammelartikel17BSammelartikelNr7D', 'model/LAG1SerieNummer17BSerieNummerNr7D', 'model/LAG1Verpackung17BVerpackungNr7D', 'model/LAG1Verpackungsstufe17BVerpackungsstufeNr7D', 'model/LAG1Verpackungszuweisung17BVerpackungszuweisungNr7D', 'model/LAG1VerpackungszuweisungRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/LAG1Artikel17BArtikelNr7D'), require('../model/LAG1Artikel17BArtikelNr7D1eingangbuchenRequest'), require('../model/LAG1Artikel17BArtikelNr7D1inventurbuchenRequest'), require('../model/LAG1Artikel17BArtikelNr7D1verschiebungbuchenRequest'), require('../model/LAG1ArtikelRequest'), require('../model/LAG1ArtikelbildRequest'), require('../model/LAG1ArtikeldokumentRequest'), require('../model/LAG1Artikelgruppe17BArtikelgruppeNr7D'), require('../model/LAG1Artikelklasse17BArtikelklasseNr7D'), require('../model/LAG1ArtikeloptionRequest'), require('../model/LAG1ArtikeltextRequest'), require('../model/LAG1Artikeluntergruppe17BArtikeluntergruppeNr7D'), require('../model/LAG1Bestand'), require('../model/LAG1BestellvorschlagRequest'), require('../model/LAG1Charge17BChargeNr7D'), require('../model/LAG1ChargeRequest'), require('../model/LAG1Hersteller17BHerstellerNr7D'), require('../model/LAG1HerstellerRequest'), require('../model/LAG1Lagerort17BLagerortNr7D'), require('../model/LAG1Lieferant17BLieferantNr7D'), require('../model/LAG1LieferantRequest'), require('../model/LAG1Notiz17BNotizNr7D'), require('../model/LAG1NotizRequest'), require('../model/LAG1Notizart17BNotizartNr7D'), require('../model/LAG1Sammelartikel17BSammelartikelNr7D'), require('../model/LAG1SerieNummer17BSerieNummerNr7D'), require('../model/LAG1Verpackung17BVerpackungNr7D'), require('../model/LAG1Verpackungsstufe17BVerpackungsstufeNr7D'), require('../model/LAG1Verpackungszuweisung17BVerpackungszuweisungNr7D'), require('../model/LAG1VerpackungszuweisungRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.ProffixRestApiRequestSammlung) {
      root.ProffixRestApiRequestSammlung = {};
    }
    root.ProffixRestApiRequestSammlung.LAGApi = factory(root.ProffixRestApiRequestSammlung.ApiClient, root.ProffixRestApiRequestSammlung.LAG1Artikel17BArtikelNr7D, root.ProffixRestApiRequestSammlung.LAG1Artikel17BArtikelNr7D1eingangbuchenRequest, root.ProffixRestApiRequestSammlung.LAG1Artikel17BArtikelNr7D1inventurbuchenRequest, root.ProffixRestApiRequestSammlung.LAG1Artikel17BArtikelNr7D1verschiebungbuchenRequest, root.ProffixRestApiRequestSammlung.LAG1ArtikelRequest, root.ProffixRestApiRequestSammlung.LAG1ArtikelbildRequest, root.ProffixRestApiRequestSammlung.LAG1ArtikeldokumentRequest, root.ProffixRestApiRequestSammlung.LAG1Artikelgruppe17BArtikelgruppeNr7D, root.ProffixRestApiRequestSammlung.LAG1Artikelklasse17BArtikelklasseNr7D, root.ProffixRestApiRequestSammlung.LAG1ArtikeloptionRequest, root.ProffixRestApiRequestSammlung.LAG1ArtikeltextRequest, root.ProffixRestApiRequestSammlung.LAG1Artikeluntergruppe17BArtikeluntergruppeNr7D, root.ProffixRestApiRequestSammlung.LAG1Bestand, root.ProffixRestApiRequestSammlung.LAG1BestellvorschlagRequest, root.ProffixRestApiRequestSammlung.LAG1Charge17BChargeNr7D, root.ProffixRestApiRequestSammlung.LAG1ChargeRequest, root.ProffixRestApiRequestSammlung.LAG1Hersteller17BHerstellerNr7D, root.ProffixRestApiRequestSammlung.LAG1HerstellerRequest, root.ProffixRestApiRequestSammlung.LAG1Lagerort17BLagerortNr7D, root.ProffixRestApiRequestSammlung.LAG1Lieferant17BLieferantNr7D, root.ProffixRestApiRequestSammlung.LAG1LieferantRequest, root.ProffixRestApiRequestSammlung.LAG1Notiz17BNotizNr7D, root.ProffixRestApiRequestSammlung.LAG1NotizRequest, root.ProffixRestApiRequestSammlung.LAG1Notizart17BNotizartNr7D, root.ProffixRestApiRequestSammlung.LAG1Sammelartikel17BSammelartikelNr7D, root.ProffixRestApiRequestSammlung.LAG1SerieNummer17BSerieNummerNr7D, root.ProffixRestApiRequestSammlung.LAG1Verpackung17BVerpackungNr7D, root.ProffixRestApiRequestSammlung.LAG1Verpackungsstufe17BVerpackungsstufeNr7D, root.ProffixRestApiRequestSammlung.LAG1Verpackungszuweisung17BVerpackungszuweisungNr7D, root.ProffixRestApiRequestSammlung.LAG1VerpackungszuweisungRequest);
  }
}(this, function(ApiClient, LAG1Artikel17BArtikelNr7D, LAG1Artikel17BArtikelNr7D1eingangbuchenRequest, LAG1Artikel17BArtikelNr7D1inventurbuchenRequest, LAG1Artikel17BArtikelNr7D1verschiebungbuchenRequest, LAG1ArtikelRequest, LAG1ArtikelbildRequest, LAG1ArtikeldokumentRequest, LAG1Artikelgruppe17BArtikelgruppeNr7D, LAG1Artikelklasse17BArtikelklasseNr7D, LAG1ArtikeloptionRequest, LAG1ArtikeltextRequest, LAG1Artikeluntergruppe17BArtikeluntergruppeNr7D, LAG1Bestand, LAG1BestellvorschlagRequest, LAG1Charge17BChargeNr7D, LAG1ChargeRequest, LAG1Hersteller17BHerstellerNr7D, LAG1HerstellerRequest, LAG1Lagerort17BLagerortNr7D, LAG1Lieferant17BLieferantNr7D, LAG1LieferantRequest, LAG1Notiz17BNotizNr7D, LAG1NotizRequest, LAG1Notizart17BNotizartNr7D, LAG1Sammelartikel17BSammelartikelNr7D, LAG1SerieNummer17BSerieNummerNr7D, LAG1Verpackung17BVerpackungNr7D, LAG1Verpackungsstufe17BVerpackungsstufeNr7D, LAG1Verpackungszuweisung17BVerpackungszuweisungNr7D, LAG1VerpackungszuweisungRequest) {
  'use strict';

  /**
   * LAG service.
   * @module api/LAGApi
   * @version 1.0
   */

  /**
   * Constructs a new LAGApi. 
   * @alias module:api/LAGApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * LAG/Artikel
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/LAG1ArtikelRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.lAGArtikelWithHttpInfo = function(contentType, pxSessionId, body) {
      var postBody = body;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling lAGArtikel");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling lAGArtikel");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling lAGArtikel");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/LAG/Artikel', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * LAG/Artikel
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/LAG1ArtikelRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.lAGArtikel = function(contentType, pxSessionId, body) {
      return this.lAGArtikelWithHttpInfo(contentType, pxSessionId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * LAG/Artikel/{ArtikelNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LAG1Artikel17BArtikelNr7D} and HTTP response
     */
    this.lAGArtikelArtikelNrWithHttpInfo = function(depth, contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'depth' is set
      if (depth === undefined || depth === null) {
        throw new Error("Missing the required parameter 'depth' when calling lAGArtikelArtikelNr");
      }

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling lAGArtikelArtikelNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling lAGArtikelArtikelNr");
      }


      var pathParams = {
      };
      var queryParams = {
        'depth': depth,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = LAG1Artikel17BArtikelNr7D;

      return this.apiClient.callApi(
        '/LAG/Artikel/HARIBO', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * LAG/Artikel/{ArtikelNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LAG1Artikel17BArtikelNr7D}
     */
    this.lAGArtikelArtikelNr = function(depth, contentType, pxSessionId) {
      return this.lAGArtikelArtikelNrWithHttpInfo(depth, contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * LAG/Artikel/{ArtikelNr}/ausgangbuchen
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.lAGArtikelArtikelNrausgangbuchenWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling lAGArtikelArtikelNrausgangbuchen");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling lAGArtikelArtikelNrausgangbuchen");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/LAG/Artikel/CPU/ausgangbuchen', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * LAG/Artikel/{ArtikelNr}/ausgangbuchen
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.lAGArtikelArtikelNrausgangbuchen = function(contentType, pxSessionId) {
      return this.lAGArtikelArtikelNrausgangbuchenWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * LAG/Artikel/{ArtikelNr}/eingangbuchen
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/LAG1Artikel17BArtikelNr7D1eingangbuchenRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.lAGArtikelArtikelNreingangbuchenWithHttpInfo = function(contentType, pxSessionId, body) {
      var postBody = body;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling lAGArtikelArtikelNreingangbuchen");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling lAGArtikelArtikelNreingangbuchen");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling lAGArtikelArtikelNreingangbuchen");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/LAG/Artikel/HD/eingangbuchen', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * LAG/Artikel/{ArtikelNr}/eingangbuchen
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/LAG1Artikel17BArtikelNr7D1eingangbuchenRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.lAGArtikelArtikelNreingangbuchen = function(contentType, pxSessionId, body) {
      return this.lAGArtikelArtikelNreingangbuchenWithHttpInfo(contentType, pxSessionId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * LAG/Artikel/{ArtikelNr}/inventurbuchen
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/LAG1Artikel17BArtikelNr7D1inventurbuchenRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.lAGArtikelArtikelNrinventurbuchenWithHttpInfo = function(contentType, pxSessionId, body) {
      var postBody = body;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling lAGArtikelArtikelNrinventurbuchen");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling lAGArtikelArtikelNrinventurbuchen");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling lAGArtikelArtikelNrinventurbuchen");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/LAG/Artikel/CPU2/inventurbuchen', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * LAG/Artikel/{ArtikelNr}/inventurbuchen
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/LAG1Artikel17BArtikelNr7D1inventurbuchenRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.lAGArtikelArtikelNrinventurbuchen = function(contentType, pxSessionId, body) {
      return this.lAGArtikelArtikelNrinventurbuchenWithHttpInfo(contentType, pxSessionId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * LAG/Artikel/{ArtikelNr}/verschiebungbuchen
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/LAG1Artikel17BArtikelNr7D1verschiebungbuchenRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.lAGArtikelArtikelNrverschiebungbuchenWithHttpInfo = function(contentType, pxSessionId, body) {
      var postBody = body;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling lAGArtikelArtikelNrverschiebungbuchen");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling lAGArtikelArtikelNrverschiebungbuchen");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling lAGArtikelArtikelNrverschiebungbuchen");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/LAG/Artikel/RAM2/verschiebungbuchen', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * LAG/Artikel/{ArtikelNr}/verschiebungbuchen
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/LAG1Artikel17BArtikelNr7D1verschiebungbuchenRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.lAGArtikelArtikelNrverschiebungbuchen = function(contentType, pxSessionId, body) {
      return this.lAGArtikelArtikelNrverschiebungbuchenWithHttpInfo(contentType, pxSessionId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * LAG/Artikelbild
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/LAG1ArtikelbildRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.lAGArtikelbildWithHttpInfo = function(contentType, pxSessionId, body) {
      var postBody = body;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling lAGArtikelbild");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling lAGArtikelbild");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling lAGArtikelbild");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/LAG/Artikelbild', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * LAG/Artikelbild
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/LAG1ArtikelbildRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.lAGArtikelbild = function(contentType, pxSessionId, body) {
      return this.lAGArtikelbildWithHttpInfo(contentType, pxSessionId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * LAG/Artikelbild/{ArtikelbildNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.lAGArtikelbildArtikelbildNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling lAGArtikelbildArtikelbildNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling lAGArtikelbildArtikelbildNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/LAG/Artikelbild/1', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * LAG/Artikelbild/{ArtikelbildNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.lAGArtikelbildArtikelbildNr = function(contentType, pxSessionId) {
      return this.lAGArtikelbildArtikelbildNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * LAG/Artikeldokument
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/LAG1ArtikeldokumentRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.lAGArtikeldokumentWithHttpInfo = function(contentType, pxSessionId, body) {
      var postBody = body;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling lAGArtikeldokument");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling lAGArtikeldokument");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling lAGArtikeldokument");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/LAG/Artikeldokument', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * LAG/Artikeldokument
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/LAG1ArtikeldokumentRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.lAGArtikeldokument = function(contentType, pxSessionId, body) {
      return this.lAGArtikeldokumentWithHttpInfo(contentType, pxSessionId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * LAG/Artikeldokument/{ArtikelNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.lAGArtikeldokumentArtikelNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling lAGArtikeldokumentArtikelNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling lAGArtikeldokumentArtikelNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/LAG/Artikeldokument/1', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * LAG/Artikeldokument/{ArtikelNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.lAGArtikeldokumentArtikelNr = function(contentType, pxSessionId) {
      return this.lAGArtikeldokumentArtikelNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * LAG/Artikelgruppe/{ArtikelgruppeNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LAG1Artikelgruppe17BArtikelgruppeNr7D} and HTTP response
     */
    this.lAGArtikelgruppeArtikelgruppeNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling lAGArtikelgruppeArtikelgruppeNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling lAGArtikelgruppeArtikelgruppeNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = LAG1Artikelgruppe17BArtikelgruppeNr7D;

      return this.apiClient.callApi(
        '/LAG/Artikelgruppe/ORD', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * LAG/Artikelgruppe/{ArtikelgruppeNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LAG1Artikelgruppe17BArtikelgruppeNr7D}
     */
    this.lAGArtikelgruppeArtikelgruppeNr = function(contentType, pxSessionId) {
      return this.lAGArtikelgruppeArtikelgruppeNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * LAG/Artikelklasse/{ArtikelklasseNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LAG1Artikelklasse17BArtikelklasseNr7D} and HTTP response
     */
    this.lAGArtikelklasseArtikelklasseNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling lAGArtikelklasseArtikelklasseNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling lAGArtikelklasseArtikelklasseNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = LAG1Artikelklasse17BArtikelklasseNr7D;

      return this.apiClient.callApi(
        '/LAG/Artikelklasse/MOEB', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * LAG/Artikelklasse/{ArtikelklasseNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LAG1Artikelklasse17BArtikelklasseNr7D}
     */
    this.lAGArtikelklasseArtikelklasseNr = function(contentType, pxSessionId) {
      return this.lAGArtikelklasseArtikelklasseNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * LAG/Artikeloption
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/LAG1ArtikeloptionRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.lAGArtikeloptionWithHttpInfo = function(contentType, pxSessionId, body) {
      var postBody = body;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling lAGArtikeloption");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling lAGArtikeloption");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling lAGArtikeloption");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/LAG/Artikeloption', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * LAG/Artikeloption
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/LAG1ArtikeloptionRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.lAGArtikeloption = function(contentType, pxSessionId, body) {
      return this.lAGArtikeloptionWithHttpInfo(contentType, pxSessionId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * LAG/Artikeloption/{ArtikeloptionNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.lAGArtikeloptionArtikeloptionNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling lAGArtikeloptionArtikeloptionNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling lAGArtikeloptionArtikeloptionNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/LAG/Artikeloption/1', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * LAG/Artikeloption/{ArtikeloptionNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.lAGArtikeloptionArtikeloptionNr = function(contentType, pxSessionId) {
      return this.lAGArtikeloptionArtikeloptionNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * LAG/Artikelstatistik/{ArtikelstatistikNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.lAGArtikelstatistikArtikelstatistikNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling lAGArtikelstatistikArtikelstatistikNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling lAGArtikelstatistikArtikelstatistikNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/LAG/Artikelstatistik/1', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * LAG/Artikelstatistik/{ArtikelstatistikNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.lAGArtikelstatistikArtikelstatistikNr = function(contentType, pxSessionId) {
      return this.lAGArtikelstatistikArtikelstatistikNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * LAG/Artikeltext
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/LAG1ArtikeltextRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.lAGArtikeltextWithHttpInfo = function(contentType, pxSessionId, body) {
      var postBody = body;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling lAGArtikeltext");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling lAGArtikeltext");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling lAGArtikeltext");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/LAG/Artikeltext', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * LAG/Artikeltext
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/LAG1ArtikeltextRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.lAGArtikeltext = function(contentType, pxSessionId, body) {
      return this.lAGArtikeltextWithHttpInfo(contentType, pxSessionId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * LAG/Artikeltext/{ArtikeltextNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.lAGArtikeltextArtikeltextNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling lAGArtikeltextArtikeltextNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling lAGArtikeltextArtikeltextNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/LAG/Artikeltext/8', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * LAG/Artikeltext/{ArtikeltextNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.lAGArtikeltextArtikeltextNr = function(contentType, pxSessionId) {
      return this.lAGArtikeltextArtikeltextNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * LAG/Artikeluntergruppe/{ArtikeluntergruppeNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LAG1Artikeluntergruppe17BArtikeluntergruppeNr7D} and HTTP response
     */
    this.lAGArtikeluntergruppeArtikeluntergruppeNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling lAGArtikeluntergruppeArtikeluntergruppeNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling lAGArtikeluntergruppeArtikeluntergruppeNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = LAG1Artikeluntergruppe17BArtikeluntergruppeNr7D;

      return this.apiClient.callApi(
        '/LAG/Artikeluntergruppe/FLAT', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * LAG/Artikeluntergruppe/{ArtikeluntergruppeNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LAG1Artikeluntergruppe17BArtikeluntergruppeNr7D}
     */
    this.lAGArtikeluntergruppeArtikeluntergruppeNr = function(contentType, pxSessionId) {
      return this.lAGArtikeluntergruppeArtikeluntergruppeNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * LAG/Bestand
     * @param {Number} depth 
     * @param {String} filter 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/LAG1Bestand>} and HTTP response
     */
    this.lAGBestandWithHttpInfo = function(depth, filter, contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'depth' is set
      if (depth === undefined || depth === null) {
        throw new Error("Missing the required parameter 'depth' when calling lAGBestand");
      }

      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling lAGBestand");
      }

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling lAGBestand");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling lAGBestand");
      }


      var pathParams = {
      };
      var queryParams = {
        'depth': depth,
        'filter': filter,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = [LAG1Bestand];

      return this.apiClient.callApi(
        '/LAG/Bestand', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * LAG/Bestand
     * @param {Number} depth 
     * @param {String} filter 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/LAG1Bestand>}
     */
    this.lAGBestand = function(depth, filter, contentType, pxSessionId) {
      return this.lAGBestandWithHttpInfo(depth, filter, contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * LAG/Bestellvorschlag
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/LAG1BestellvorschlagRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.lAGBestellvorschlagWithHttpInfo = function(contentType, pxSessionId, body) {
      var postBody = body;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling lAGBestellvorschlag");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling lAGBestellvorschlag");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling lAGBestellvorschlag");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/LAG/Bestellvorschlag', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * LAG/Bestellvorschlag
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/LAG1BestellvorschlagRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.lAGBestellvorschlag = function(contentType, pxSessionId, body) {
      return this.lAGBestellvorschlagWithHttpInfo(contentType, pxSessionId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * LAG/Bestellvorschlag/{BestellvorschlagNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.lAGBestellvorschlagBestellvorschlagNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling lAGBestellvorschlagBestellvorschlagNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling lAGBestellvorschlagBestellvorschlagNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/LAG/Bestellvorschlag/1', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * LAG/Bestellvorschlag/{BestellvorschlagNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.lAGBestellvorschlagBestellvorschlagNr = function(contentType, pxSessionId) {
      return this.lAGBestellvorschlagBestellvorschlagNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * LAG/Charge
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/LAG1ChargeRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.lAGChargeWithHttpInfo = function(contentType, pxSessionId, body) {
      var postBody = body;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling lAGCharge");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling lAGCharge");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling lAGCharge");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/LAG/Charge', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * LAG/Charge
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/LAG1ChargeRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.lAGCharge = function(contentType, pxSessionId, body) {
      return this.lAGChargeWithHttpInfo(contentType, pxSessionId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * LAG/Charge/{ChargeNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LAG1Charge17BChargeNr7D} and HTTP response
     */
    this.lAGChargeChargeNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling lAGChargeChargeNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling lAGChargeChargeNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = LAG1Charge17BChargeNr7D;

      return this.apiClient.callApi(
        '/LAG/Charge/A1234-Z', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * LAG/Charge/{ChargeNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LAG1Charge17BChargeNr7D}
     */
    this.lAGChargeChargeNr = function(contentType, pxSessionId) {
      return this.lAGChargeChargeNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * LAG/Hersteller
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/LAG1HerstellerRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.lAGHerstellerWithHttpInfo = function(contentType, pxSessionId, body) {
      var postBody = body;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling lAGHersteller");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling lAGHersteller");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling lAGHersteller");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/LAG/Hersteller', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * LAG/Hersteller
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/LAG1HerstellerRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.lAGHersteller = function(contentType, pxSessionId, body) {
      return this.lAGHerstellerWithHttpInfo(contentType, pxSessionId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * LAG/Hersteller/{HerstellerNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LAG1Hersteller17BHerstellerNr7D} and HTTP response
     */
    this.lAGHerstellerHerstellerNrWithHttpInfo = function(depth, contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'depth' is set
      if (depth === undefined || depth === null) {
        throw new Error("Missing the required parameter 'depth' when calling lAGHerstellerHerstellerNr");
      }

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling lAGHerstellerHerstellerNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling lAGHerstellerHerstellerNr");
      }


      var pathParams = {
      };
      var queryParams = {
        'depth': depth,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = LAG1Hersteller17BHerstellerNr7D;

      return this.apiClient.callApi(
        '/LAG/Hersteller/1', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * LAG/Hersteller/{HerstellerNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LAG1Hersteller17BHerstellerNr7D}
     */
    this.lAGHerstellerHerstellerNr = function(depth, contentType, pxSessionId) {
      return this.lAGHerstellerHerstellerNrWithHttpInfo(depth, contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * LAG/Lagerort/{LagerortNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LAG1Lagerort17BLagerortNr7D} and HTTP response
     */
    this.lAGLagerortLagerortNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling lAGLagerortLagerortNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling lAGLagerortLagerortNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = LAG1Lagerort17BLagerortNr7D;

      return this.apiClient.callApi(
        '/LAG/Lagerort/NEBEN', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * LAG/Lagerort/{LagerortNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LAG1Lagerort17BLagerortNr7D}
     */
    this.lAGLagerortLagerortNr = function(contentType, pxSessionId) {
      return this.lAGLagerortLagerortNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * LAG/Lagerplatz/{LagerplatzNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<'String'>} and HTTP response
     */
    this.lAGLagerplatzLagerplatzNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling lAGLagerplatzLagerplatzNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling lAGLagerplatzLagerplatzNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/LAG/Lagerplatz/XYZ', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * LAG/Lagerplatz/{LagerplatzNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<'String'>}
     */
    this.lAGLagerplatzLagerplatzNr = function(contentType, pxSessionId) {
      return this.lAGLagerplatzLagerplatzNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * LAG/Lieferant
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/LAG1LieferantRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.lAGLieferantWithHttpInfo = function(contentType, pxSessionId, body) {
      var postBody = body;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling lAGLieferant");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling lAGLieferant");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling lAGLieferant");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/LAG/Lieferant', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * LAG/Lieferant
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/LAG1LieferantRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.lAGLieferant = function(contentType, pxSessionId, body) {
      return this.lAGLieferantWithHttpInfo(contentType, pxSessionId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * LAG/Lieferant/{LieferantNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LAG1Lieferant17BLieferantNr7D} and HTTP response
     */
    this.lAGLieferantLieferantNrWithHttpInfo = function(depth, contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'depth' is set
      if (depth === undefined || depth === null) {
        throw new Error("Missing the required parameter 'depth' when calling lAGLieferantLieferantNr");
      }

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling lAGLieferantLieferantNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling lAGLieferantLieferantNr");
      }


      var pathParams = {
      };
      var queryParams = {
        'depth': depth,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = LAG1Lieferant17BLieferantNr7D;

      return this.apiClient.callApi(
        '/LAG/Lieferant/1', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * LAG/Lieferant/{LieferantNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LAG1Lieferant17BLieferantNr7D}
     */
    this.lAGLieferantLieferantNr = function(depth, contentType, pxSessionId) {
      return this.lAGLieferantLieferantNrWithHttpInfo(depth, contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * LAG/Notiz
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/LAG1NotizRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.lAGNotizWithHttpInfo = function(contentType, pxSessionId, body) {
      var postBody = body;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling lAGNotiz");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling lAGNotiz");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling lAGNotiz");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/LAG/Notiz', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * LAG/Notiz
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/LAG1NotizRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.lAGNotiz = function(contentType, pxSessionId, body) {
      return this.lAGNotizWithHttpInfo(contentType, pxSessionId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * LAG/Notiz/{NotizNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LAG1Notiz17BNotizNr7D} and HTTP response
     */
    this.lAGNotizNotizNrWithHttpInfo = function(depth, contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'depth' is set
      if (depth === undefined || depth === null) {
        throw new Error("Missing the required parameter 'depth' when calling lAGNotizNotizNr");
      }

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling lAGNotizNotizNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling lAGNotizNotizNr");
      }


      var pathParams = {
      };
      var queryParams = {
        'depth': depth,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = LAG1Notiz17BNotizNr7D;

      return this.apiClient.callApi(
        '/LAG/Notiz/7', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * LAG/Notiz/{NotizNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LAG1Notiz17BNotizNr7D}
     */
    this.lAGNotizNotizNr = function(depth, contentType, pxSessionId) {
      return this.lAGNotizNotizNrWithHttpInfo(depth, contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * LAG/Notizart/{NotizartNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LAG1Notizart17BNotizartNr7D} and HTTP response
     */
    this.lAGNotizartNotizartNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling lAGNotizartNotizartNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling lAGNotizartNotizartNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = LAG1Notizart17BNotizartNr7D;

      return this.apiClient.callApi(
        '/LAG/Notizart/ERL', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * LAG/Notizart/{NotizartNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LAG1Notizart17BNotizartNr7D}
     */
    this.lAGNotizartNotizartNr = function(contentType, pxSessionId) {
      return this.lAGNotizartNotizartNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * LAG/Sammelartikel/{SammelartikelNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LAG1Sammelartikel17BSammelartikelNr7D} and HTTP response
     */
    this.lAGSammelartikelSammelartikelNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling lAGSammelartikelSammelartikelNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling lAGSammelartikelSammelartikelNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = LAG1Sammelartikel17BSammelartikelNr7D;

      return this.apiClient.callApi(
        '/LAG/Sammelartikel/HOSE', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * LAG/Sammelartikel/{SammelartikelNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LAG1Sammelartikel17BSammelartikelNr7D}
     */
    this.lAGSammelartikelSammelartikelNr = function(contentType, pxSessionId) {
      return this.lAGSammelartikelSammelartikelNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * LAG/SerieNummer/{SerieNummerNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LAG1SerieNummer17BSerieNummerNr7D} and HTTP response
     */
    this.lAGSerieNummerSerieNummerNrWithHttpInfo = function(depth, contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'depth' is set
      if (depth === undefined || depth === null) {
        throw new Error("Missing the required parameter 'depth' when calling lAGSerieNummerSerieNummerNr");
      }

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling lAGSerieNummerSerieNummerNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling lAGSerieNummerSerieNummerNr");
      }


      var pathParams = {
      };
      var queryParams = {
        'depth': depth,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = LAG1SerieNummer17BSerieNummerNr7D;

      return this.apiClient.callApi(
        '/LAG/SerieNummer/180', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * LAG/SerieNummer/{SerieNummerNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LAG1SerieNummer17BSerieNummerNr7D}
     */
    this.lAGSerieNummerSerieNummerNr = function(depth, contentType, pxSessionId) {
      return this.lAGSerieNummerSerieNummerNrWithHttpInfo(depth, contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * LAG/Stuecklistenposition
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.lAGStuecklistenpositionWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling lAGStuecklistenposition");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling lAGStuecklistenposition");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/LAG/Stuecklistenposition', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * LAG/Stuecklistenposition
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.lAGStuecklistenposition = function(contentType, pxSessionId) {
      return this.lAGStuecklistenpositionWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * LAG/Stuecklistenposition/{StuecklistenpositionNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.lAGStuecklistenpositionStuecklistenpositionNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling lAGStuecklistenpositionStuecklistenpositionNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling lAGStuecklistenpositionStuecklistenpositionNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/LAG/Stuecklistenposition/1', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * LAG/Stuecklistenposition/{StuecklistenpositionNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.lAGStuecklistenpositionStuecklistenpositionNr = function(contentType, pxSessionId) {
      return this.lAGStuecklistenpositionStuecklistenpositionNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * LAG/Verpackung/{VerpackungNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LAG1Verpackung17BVerpackungNr7D} and HTTP response
     */
    this.lAGVerpackungVerpackungNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling lAGVerpackungVerpackungNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling lAGVerpackungVerpackungNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = LAG1Verpackung17BVerpackungNr7D;

      return this.apiClient.callApi(
        '/LAG/Verpackung/KARTON', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * LAG/Verpackung/{VerpackungNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LAG1Verpackung17BVerpackungNr7D}
     */
    this.lAGVerpackungVerpackungNr = function(contentType, pxSessionId) {
      return this.lAGVerpackungVerpackungNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * LAG/Verpackungsstufe/{VerpackungsstufeNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LAG1Verpackungsstufe17BVerpackungsstufeNr7D} and HTTP response
     */
    this.lAGVerpackungsstufeVerpackungsstufeNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling lAGVerpackungsstufeVerpackungsstufeNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling lAGVerpackungsstufeVerpackungsstufeNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = LAG1Verpackungsstufe17BVerpackungsstufeNr7D;

      return this.apiClient.callApi(
        '/LAG/Verpackungsstufe/10', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * LAG/Verpackungsstufe/{VerpackungsstufeNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LAG1Verpackungsstufe17BVerpackungsstufeNr7D}
     */
    this.lAGVerpackungsstufeVerpackungsstufeNr = function(contentType, pxSessionId) {
      return this.lAGVerpackungsstufeVerpackungsstufeNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * LAG/Verpackungszuweisung
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/LAG1VerpackungszuweisungRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.lAGVerpackungszuweisungWithHttpInfo = function(contentType, pxSessionId, body) {
      var postBody = body;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling lAGVerpackungszuweisung");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling lAGVerpackungszuweisung");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling lAGVerpackungszuweisung");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/LAG/Verpackungszuweisung', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * LAG/Verpackungszuweisung
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/LAG1VerpackungszuweisungRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.lAGVerpackungszuweisung = function(contentType, pxSessionId, body) {
      return this.lAGVerpackungszuweisungWithHttpInfo(contentType, pxSessionId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * LAG/Verpackungszuweisung/{VerpackungszuweisungNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LAG1Verpackungszuweisung17BVerpackungszuweisungNr7D} and HTTP response
     */
    this.lAGVerpackungszuweisungVerpackungszuweisungNrWithHttpInfo = function(depth, contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'depth' is set
      if (depth === undefined || depth === null) {
        throw new Error("Missing the required parameter 'depth' when calling lAGVerpackungszuweisungVerpackungszuweisungNr");
      }

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling lAGVerpackungszuweisungVerpackungszuweisungNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling lAGVerpackungszuweisungVerpackungszuweisungNr");
      }


      var pathParams = {
      };
      var queryParams = {
        'depth': depth,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = LAG1Verpackungszuweisung17BVerpackungszuweisungNr7D;

      return this.apiClient.callApi(
        '/LAG/Verpackungszuweisung/1', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * LAG/Verpackungszuweisung/{VerpackungszuweisungNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LAG1Verpackungszuweisung17BVerpackungszuweisungNr7D}
     */
    this.lAGVerpackungszuweisungVerpackungszuweisungNr = function(depth, contentType, pxSessionId) {
      return this.lAGVerpackungszuweisungVerpackungszuweisungNrWithHttpInfo(depth, contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
