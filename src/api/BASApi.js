/**
 * PROFFIX REST API Request Sammlung
 * Dies ist eine Request-Sammlung der PROFFIX REST API, welche das PROFFIX REST API Entwicklerhandbuch unter [https://www.proffix.net/entwickler/restapi/handbuch](https://www.proffix.net/entwickler/restapi/handbuch) erg√§nzt.
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BAS1Anlage17BAnlageNr7D', 'model/BAS1Garantiezusatz17BGarantiezusatzNr7D', 'model/BAS1Installation17BInstallationNr7D', 'model/BAS1Kunde17BKundeNr7D', 'model/BAS1Prioritaet17BPrioritaetNr7D', 'model/BAS1Standort17BStandortNr7D', 'model/BAS1Vertragstyp17BVertragstypNr7D'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BAS1Anlage17BAnlageNr7D'), require('../model/BAS1Garantiezusatz17BGarantiezusatzNr7D'), require('../model/BAS1Installation17BInstallationNr7D'), require('../model/BAS1Kunde17BKundeNr7D'), require('../model/BAS1Prioritaet17BPrioritaetNr7D'), require('../model/BAS1Standort17BStandortNr7D'), require('../model/BAS1Vertragstyp17BVertragstypNr7D'));
  } else {
    // Browser globals (root is window)
    if (!root.ProffixRestApiRequestSammlung) {
      root.ProffixRestApiRequestSammlung = {};
    }
    root.ProffixRestApiRequestSammlung.BASApi = factory(root.ProffixRestApiRequestSammlung.ApiClient, root.ProffixRestApiRequestSammlung.BAS1Anlage17BAnlageNr7D, root.ProffixRestApiRequestSammlung.BAS1Garantiezusatz17BGarantiezusatzNr7D, root.ProffixRestApiRequestSammlung.BAS1Installation17BInstallationNr7D, root.ProffixRestApiRequestSammlung.BAS1Kunde17BKundeNr7D, root.ProffixRestApiRequestSammlung.BAS1Prioritaet17BPrioritaetNr7D, root.ProffixRestApiRequestSammlung.BAS1Standort17BStandortNr7D, root.ProffixRestApiRequestSammlung.BAS1Vertragstyp17BVertragstypNr7D);
  }
}(this, function(ApiClient, BAS1Anlage17BAnlageNr7D, BAS1Garantiezusatz17BGarantiezusatzNr7D, BAS1Installation17BInstallationNr7D, BAS1Kunde17BKundeNr7D, BAS1Prioritaet17BPrioritaetNr7D, BAS1Standort17BStandortNr7D, BAS1Vertragstyp17BVertragstypNr7D) {
  'use strict';

  /**
   * BAS service.
   * @module api/BASApi
   * @version 1.0
   */

  /**
   * Constructs a new BASApi. 
   * @alias module:api/BASApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * BAS/Anlage/{AnlageNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BAS1Anlage17BAnlageNr7D} and HTTP response
     */
    this.bASAnlageAnlageNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling bASAnlageAnlageNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling bASAnlageAnlageNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = BAS1Anlage17BAnlageNr7D;

      return this.apiClient.callApi(
        '/BAS/Anlage/1', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * BAS/Anlage/{AnlageNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BAS1Anlage17BAnlageNr7D}
     */
    this.bASAnlageAnlageNr = function(contentType, pxSessionId) {
      return this.bASAnlageAnlageNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * BAS/Garantiezusatz/{GarantiezusatzNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BAS1Garantiezusatz17BGarantiezusatzNr7D} and HTTP response
     */
    this.bASGarantiezusatzGarantiezusatzNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling bASGarantiezusatzGarantiezusatzNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling bASGarantiezusatzGarantiezusatzNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = BAS1Garantiezusatz17BGarantiezusatzNr7D;

      return this.apiClient.callApi(
        '/BAS/Garantiezusatz/1', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * BAS/Garantiezusatz/{GarantiezusatzNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BAS1Garantiezusatz17BGarantiezusatzNr7D}
     */
    this.bASGarantiezusatzGarantiezusatzNr = function(contentType, pxSessionId) {
      return this.bASGarantiezusatzGarantiezusatzNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * BAS/Installation/{InstallationNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BAS1Installation17BInstallationNr7D} and HTTP response
     */
    this.bASInstallationInstallationNrWithHttpInfo = function(depth, contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'depth' is set
      if (depth === undefined || depth === null) {
        throw new Error("Missing the required parameter 'depth' when calling bASInstallationInstallationNr");
      }

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling bASInstallationInstallationNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling bASInstallationInstallationNr");
      }


      var pathParams = {
      };
      var queryParams = {
        'depth': depth,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = BAS1Installation17BInstallationNr7D;

      return this.apiClient.callApi(
        '/BAS/Installation/1', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * BAS/Installation/{InstallationNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BAS1Installation17BInstallationNr7D}
     */
    this.bASInstallationInstallationNr = function(depth, contentType, pxSessionId) {
      return this.bASInstallationInstallationNrWithHttpInfo(depth, contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * BAS/Kunde/{KundeNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BAS1Kunde17BKundeNr7D} and HTTP response
     */
    this.bASKundeKundeNrWithHttpInfo = function(depth, contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'depth' is set
      if (depth === undefined || depth === null) {
        throw new Error("Missing the required parameter 'depth' when calling bASKundeKundeNr");
      }

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling bASKundeKundeNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling bASKundeKundeNr");
      }


      var pathParams = {
      };
      var queryParams = {
        'depth': depth,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = BAS1Kunde17BKundeNr7D;

      return this.apiClient.callApi(
        '/BAS/Kunde/1', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * BAS/Kunde/{KundeNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BAS1Kunde17BKundeNr7D}
     */
    this.bASKundeKundeNr = function(depth, contentType, pxSessionId) {
      return this.bASKundeKundeNrWithHttpInfo(depth, contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * BAS/Prioritaet/{PrioritaetNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BAS1Prioritaet17BPrioritaetNr7D} and HTTP response
     */
    this.bASPrioritaetPrioritaetNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling bASPrioritaetPrioritaetNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling bASPrioritaetPrioritaetNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = BAS1Prioritaet17BPrioritaetNr7D;

      return this.apiClient.callApi(
        '/BAS/Prioritaet/1', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * BAS/Prioritaet/{PrioritaetNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BAS1Prioritaet17BPrioritaetNr7D}
     */
    this.bASPrioritaetPrioritaetNr = function(contentType, pxSessionId) {
      return this.bASPrioritaetPrioritaetNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * BAS/Standort/{StandortNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BAS1Standort17BStandortNr7D} and HTTP response
     */
    this.bASStandortStandortNrWithHttpInfo = function(depth, contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'depth' is set
      if (depth === undefined || depth === null) {
        throw new Error("Missing the required parameter 'depth' when calling bASStandortStandortNr");
      }

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling bASStandortStandortNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling bASStandortStandortNr");
      }


      var pathParams = {
      };
      var queryParams = {
        'depth': depth,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = BAS1Standort17BStandortNr7D;

      return this.apiClient.callApi(
        '/BAS/Standort/1', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * BAS/Standort/{StandortNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BAS1Standort17BStandortNr7D}
     */
    this.bASStandortStandortNr = function(depth, contentType, pxSessionId) {
      return this.bASStandortStandortNrWithHttpInfo(depth, contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * BAS/Vertragstyp/{VertragstypNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BAS1Vertragstyp17BVertragstypNr7D} and HTTP response
     */
    this.bASVertragstypVertragstypNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling bASVertragstypVertragstypNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling bASVertragstypVertragstypNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = BAS1Vertragstyp17BVertragstypNr7D;

      return this.apiClient.callApi(
        '/BAS/Vertragstyp/SIM', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * BAS/Vertragstyp/{VertragstypNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BAS1Vertragstyp17BVertragstypNr7D}
     */
    this.bASVertragstypVertragstypNr = function(contentType, pxSessionId) {
      return this.bASVertragstypVertragstypNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
