/**
 * PROFFIX REST API Request Sammlung
 * Dies ist eine Request-Sammlung der PROFFIX REST API, welche das PROFFIX REST API Entwicklerhandbuch unter [https://www.proffix.net/entwickler/restapi/handbuch](https://www.proffix.net/entwickler/restapi/handbuch) erg√§nzt.
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/STU1OffenerRapport17BRapportNr7D', 'model/STU1OffenerRapportRequest', 'model/STU1Positionsart17BPositionsartNr7D', 'model/STU1Projekt17BProjektNr7D', 'model/STU1Rapport17BRapportNr7D', 'model/STU1Rapport1abschliessenRequest', 'model/STU1Rapport1freigebenRequest', 'model/STU1RapportRequest', 'model/STU1RapportdokumentRequest', 'model/STU1Spesenart17BSpesenartNr7D', 'model/STU1Teilleistung17BTeilleistungNr7D', 'model/STU1Teilleistungsgruppe17BTeilleistungsgruppeNr7D', 'model/STU1Teilleistungstyp17BTeilleistungstypNr7D'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/STU1OffenerRapport17BRapportNr7D'), require('../model/STU1OffenerRapportRequest'), require('../model/STU1Positionsart17BPositionsartNr7D'), require('../model/STU1Projekt17BProjektNr7D'), require('../model/STU1Rapport17BRapportNr7D'), require('../model/STU1Rapport1abschliessenRequest'), require('../model/STU1Rapport1freigebenRequest'), require('../model/STU1RapportRequest'), require('../model/STU1RapportdokumentRequest'), require('../model/STU1Spesenart17BSpesenartNr7D'), require('../model/STU1Teilleistung17BTeilleistungNr7D'), require('../model/STU1Teilleistungsgruppe17BTeilleistungsgruppeNr7D'), require('../model/STU1Teilleistungstyp17BTeilleistungstypNr7D'));
  } else {
    // Browser globals (root is window)
    if (!root.ProffixRestApiRequestSammlung) {
      root.ProffixRestApiRequestSammlung = {};
    }
    root.ProffixRestApiRequestSammlung.STUApi = factory(root.ProffixRestApiRequestSammlung.ApiClient, root.ProffixRestApiRequestSammlung.STU1OffenerRapport17BRapportNr7D, root.ProffixRestApiRequestSammlung.STU1OffenerRapportRequest, root.ProffixRestApiRequestSammlung.STU1Positionsart17BPositionsartNr7D, root.ProffixRestApiRequestSammlung.STU1Projekt17BProjektNr7D, root.ProffixRestApiRequestSammlung.STU1Rapport17BRapportNr7D, root.ProffixRestApiRequestSammlung.STU1Rapport1abschliessenRequest, root.ProffixRestApiRequestSammlung.STU1Rapport1freigebenRequest, root.ProffixRestApiRequestSammlung.STU1RapportRequest, root.ProffixRestApiRequestSammlung.STU1RapportdokumentRequest, root.ProffixRestApiRequestSammlung.STU1Spesenart17BSpesenartNr7D, root.ProffixRestApiRequestSammlung.STU1Teilleistung17BTeilleistungNr7D, root.ProffixRestApiRequestSammlung.STU1Teilleistungsgruppe17BTeilleistungsgruppeNr7D, root.ProffixRestApiRequestSammlung.STU1Teilleistungstyp17BTeilleistungstypNr7D);
  }
}(this, function(ApiClient, STU1OffenerRapport17BRapportNr7D, STU1OffenerRapportRequest, STU1Positionsart17BPositionsartNr7D, STU1Projekt17BProjektNr7D, STU1Rapport17BRapportNr7D, STU1Rapport1abschliessenRequest, STU1Rapport1freigebenRequest, STU1RapportRequest, STU1RapportdokumentRequest, STU1Spesenart17BSpesenartNr7D, STU1Teilleistung17BTeilleistungNr7D, STU1Teilleistungsgruppe17BTeilleistungsgruppeNr7D, STU1Teilleistungstyp17BTeilleistungstypNr7D) {
  'use strict';

  /**
   * STU service.
   * @module api/STUApi
   * @version 1.0
   */

  /**
   * Constructs a new STUApi. 
   * @alias module:api/STUApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * STU/Abrechnungsart/{AbrechnungsartNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.sTUAbrechnungsartAbrechnungsartNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling sTUAbrechnungsartAbrechnungsartNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling sTUAbrechnungsartAbrechnungsartNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/STU/Abrechnungsart/1', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * STU/Abrechnungsart/{AbrechnungsartNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.sTUAbrechnungsartAbrechnungsartNr = function(contentType, pxSessionId) {
      return this.sTUAbrechnungsartAbrechnungsartNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * STU/Gebaeudeart/{GebaeudeartNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.sTUGebaeudeartGebaeudeartNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling sTUGebaeudeartGebaeudeartNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling sTUGebaeudeartGebaeudeartNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/STU/Gebaeudeart/1', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * STU/Gebaeudeart/{GebaeudeartNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.sTUGebaeudeartGebaeudeartNr = function(contentType, pxSessionId) {
      return this.sTUGebaeudeartGebaeudeartNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * STU/OffenerRapport
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/STU1OffenerRapportRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.sTUOffenerRapportWithHttpInfo = function(contentType, pxSessionId, body) {
      var postBody = body;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling sTUOffenerRapport");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling sTUOffenerRapport");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling sTUOffenerRapport");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/STU/OffenerRapport', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * STU/OffenerRapport
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/STU1OffenerRapportRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.sTUOffenerRapport = function(contentType, pxSessionId, body) {
      return this.sTUOffenerRapportWithHttpInfo(contentType, pxSessionId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * STU/OffenerRapport/{RapportNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/STU1OffenerRapport17BRapportNr7D} and HTTP response
     */
    this.sTUOffenerRapportRapportNrWithHttpInfo = function(depth, contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'depth' is set
      if (depth === undefined || depth === null) {
        throw new Error("Missing the required parameter 'depth' when calling sTUOffenerRapportRapportNr");
      }

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling sTUOffenerRapportRapportNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling sTUOffenerRapportRapportNr");
      }


      var pathParams = {
      };
      var queryParams = {
        'depth': depth,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = STU1OffenerRapport17BRapportNr7D;

      return this.apiClient.callApi(
        '/STU/OffenerRapport/1', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * STU/OffenerRapport/{RapportNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/STU1OffenerRapport17BRapportNr7D}
     */
    this.sTUOffenerRapportRapportNr = function(depth, contentType, pxSessionId) {
      return this.sTUOffenerRapportRapportNrWithHttpInfo(depth, contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * STU/OffenerRapport/{RapportNr}/abschliessen
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.sTUOffenerRapportRapportNrabschliessenWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling sTUOffenerRapportRapportNrabschliessen");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling sTUOffenerRapportRapportNrabschliessen");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/STU/OffenerRapport/1/abschliessen', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * STU/OffenerRapport/{RapportNr}/abschliessen
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.sTUOffenerRapportRapportNrabschliessen = function(contentType, pxSessionId) {
      return this.sTUOffenerRapportRapportNrabschliessenWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * STU/OffenerRapport/{RapportNr}/starten
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.sTUOffenerRapportRapportNrstartenWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling sTUOffenerRapportRapportNrstarten");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling sTUOffenerRapportRapportNrstarten");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/STU/OffenerRapport/1/starten', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * STU/OffenerRapport/{RapportNr}/starten
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.sTUOffenerRapportRapportNrstarten = function(contentType, pxSessionId) {
      return this.sTUOffenerRapportRapportNrstartenWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * STU/OffenerRapport/{RapportNr}/stoppen
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.sTUOffenerRapportRapportNrstoppenWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling sTUOffenerRapportRapportNrstoppen");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling sTUOffenerRapportRapportNrstoppen");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/STU/OffenerRapport/1/stoppen', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * STU/OffenerRapport/{RapportNr}/stoppen
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.sTUOffenerRapportRapportNrstoppen = function(contentType, pxSessionId) {
      return this.sTUOffenerRapportRapportNrstoppenWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * STU/Positionsart/{PositionsartNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/STU1Positionsart17BPositionsartNr7D} and HTTP response
     */
    this.sTUPositionsartPositionsartNrWithHttpInfo = function(depth, contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'depth' is set
      if (depth === undefined || depth === null) {
        throw new Error("Missing the required parameter 'depth' when calling sTUPositionsartPositionsartNr");
      }

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling sTUPositionsartPositionsartNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling sTUPositionsartPositionsartNr");
      }


      var pathParams = {
      };
      var queryParams = {
        'depth': depth,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = STU1Positionsart17BPositionsartNr7D;

      return this.apiClient.callApi(
        '/STU/Positionsart/1', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * STU/Positionsart/{PositionsartNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/STU1Positionsart17BPositionsartNr7D}
     */
    this.sTUPositionsartPositionsartNr = function(depth, contentType, pxSessionId) {
      return this.sTUPositionsartPositionsartNrWithHttpInfo(depth, contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * STU/Projekt/{ProjektNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/STU1Projekt17BProjektNr7D} and HTTP response
     */
    this.sTUProjektProjektNrWithHttpInfo = function(depth, contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'depth' is set
      if (depth === undefined || depth === null) {
        throw new Error("Missing the required parameter 'depth' when calling sTUProjektProjektNr");
      }

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling sTUProjektProjektNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling sTUProjektProjektNr");
      }


      var pathParams = {
      };
      var queryParams = {
        'depth': depth,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = STU1Projekt17BProjektNr7D;

      return this.apiClient.callApi(
        '/STU/Projekt/3', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * STU/Projekt/{ProjektNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/STU1Projekt17BProjektNr7D}
     */
    this.sTUProjektProjektNr = function(depth, contentType, pxSessionId) {
      return this.sTUProjektProjektNrWithHttpInfo(depth, contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * STU/Rapport
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/STU1RapportRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.sTURapportWithHttpInfo = function(contentType, pxSessionId, body) {
      var postBody = body;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling sTURapport");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling sTURapport");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling sTURapport");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/STU/Rapport', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * STU/Rapport
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/STU1RapportRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.sTURapport = function(contentType, pxSessionId, body) {
      return this.sTURapportWithHttpInfo(contentType, pxSessionId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * STU/Rapport/{RapportNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/STU1Rapport17BRapportNr7D} and HTTP response
     */
    this.sTURapportRapportNrWithHttpInfo = function(depth, contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'depth' is set
      if (depth === undefined || depth === null) {
        throw new Error("Missing the required parameter 'depth' when calling sTURapportRapportNr");
      }

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling sTURapportRapportNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling sTURapportRapportNr");
      }


      var pathParams = {
      };
      var queryParams = {
        'depth': depth,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = STU1Rapport17BRapportNr7D;

      return this.apiClient.callApi(
        '/STU/Rapport/1', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * STU/Rapport/{RapportNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/STU1Rapport17BRapportNr7D}
     */
    this.sTURapportRapportNr = function(depth, contentType, pxSessionId) {
      return this.sTURapportRapportNrWithHttpInfo(depth, contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * STU/Rapport/abschliessen
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/STU1Rapport1abschliessenRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.sTURapportabschliessenWithHttpInfo = function(contentType, pxSessionId, body) {
      var postBody = body;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling sTURapportabschliessen");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling sTURapportabschliessen");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling sTURapportabschliessen");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/STU/Rapport/abschliessen', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * STU/Rapport/abschliessen
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/STU1Rapport1abschliessenRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.sTURapportabschliessen = function(contentType, pxSessionId, body) {
      return this.sTURapportabschliessenWithHttpInfo(contentType, pxSessionId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * STU/Rapportdokument
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/STU1RapportdokumentRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.sTURapportdokumentWithHttpInfo = function(contentType, pxSessionId, body) {
      var postBody = body;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling sTURapportdokument");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling sTURapportdokument");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling sTURapportdokument");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/STU/Rapportdokument', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * STU/Rapportdokument
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/STU1RapportdokumentRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.sTURapportdokument = function(contentType, pxSessionId, body) {
      return this.sTURapportdokumentWithHttpInfo(contentType, pxSessionId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * STU/Rapportdokument/{RapportdokumentNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.sTURapportdokumentRapportdokumentNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling sTURapportdokumentRapportdokumentNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling sTURapportdokumentRapportdokumentNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/STU/Rapportdokument/1', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * STU/Rapportdokument/{RapportdokumentNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.sTURapportdokumentRapportdokumentNr = function(contentType, pxSessionId) {
      return this.sTURapportdokumentRapportdokumentNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * STU/Rapport/freigeben
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/STU1Rapport1freigebenRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.sTURapportfreigebenWithHttpInfo = function(contentType, pxSessionId, body) {
      var postBody = body;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling sTURapportfreigeben");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling sTURapportfreigeben");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling sTURapportfreigeben");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/STU/Rapport/freigeben', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * STU/Rapport/freigeben
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/STU1Rapport1freigebenRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.sTURapportfreigeben = function(contentType, pxSessionId, body) {
      return this.sTURapportfreigebenWithHttpInfo(contentType, pxSessionId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * STU/Spesenart/{SpesenartNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/STU1Spesenart17BSpesenartNr7D} and HTTP response
     */
    this.sTUSpesenartSpesenartNrWithHttpInfo = function(depth, contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'depth' is set
      if (depth === undefined || depth === null) {
        throw new Error("Missing the required parameter 'depth' when calling sTUSpesenartSpesenartNr");
      }

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling sTUSpesenartSpesenartNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling sTUSpesenartSpesenartNr");
      }


      var pathParams = {
      };
      var queryParams = {
        'depth': depth,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = STU1Spesenart17BSpesenartNr7D;

      return this.apiClient.callApi(
        '/STU/Spesenart/1', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * STU/Spesenart/{SpesenartNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/STU1Spesenart17BSpesenartNr7D}
     */
    this.sTUSpesenartSpesenartNr = function(depth, contentType, pxSessionId) {
      return this.sTUSpesenartSpesenartNrWithHttpInfo(depth, contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * STU/Statusart/{StatusartNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.sTUStatusartStatusartNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling sTUStatusartStatusartNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling sTUStatusartStatusartNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/STU/Statusart/1', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * STU/Statusart/{StatusartNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.sTUStatusartStatusartNr = function(contentType, pxSessionId) {
      return this.sTUStatusartStatusartNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * STU/Teilleistung/{TeilleistungNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/STU1Teilleistung17BTeilleistungNr7D} and HTTP response
     */
    this.sTUTeilleistungTeilleistungNrWithHttpInfo = function(depth, contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'depth' is set
      if (depth === undefined || depth === null) {
        throw new Error("Missing the required parameter 'depth' when calling sTUTeilleistungTeilleistungNr");
      }

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling sTUTeilleistungTeilleistungNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling sTUTeilleistungTeilleistungNr");
      }


      var pathParams = {
      };
      var queryParams = {
        'depth': depth,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = STU1Teilleistung17BTeilleistungNr7D;

      return this.apiClient.callApi(
        '/STU/Teilleistung/1', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * STU/Teilleistung/{TeilleistungNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/STU1Teilleistung17BTeilleistungNr7D}
     */
    this.sTUTeilleistungTeilleistungNr = function(depth, contentType, pxSessionId) {
      return this.sTUTeilleistungTeilleistungNrWithHttpInfo(depth, contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * STU/Teilleistungsgruppe/{TeilleistungsgruppeNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/STU1Teilleistungsgruppe17BTeilleistungsgruppeNr7D} and HTTP response
     */
    this.sTUTeilleistungsgruppeTeilleistungsgruppeNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling sTUTeilleistungsgruppeTeilleistungsgruppeNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling sTUTeilleistungsgruppeTeilleistungsgruppeNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = STU1Teilleistungsgruppe17BTeilleistungsgruppeNr7D;

      return this.apiClient.callApi(
        '/STU/Teilleistungsgruppe/1', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * STU/Teilleistungsgruppe/{TeilleistungsgruppeNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/STU1Teilleistungsgruppe17BTeilleistungsgruppeNr7D}
     */
    this.sTUTeilleistungsgruppeTeilleistungsgruppeNr = function(contentType, pxSessionId) {
      return this.sTUTeilleistungsgruppeTeilleistungsgruppeNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * STU/Teilleistungstyp/{TeilleistungstypNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/STU1Teilleistungstyp17BTeilleistungstypNr7D} and HTTP response
     */
    this.sTUTeilleistungstypTeilleistungstypNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling sTUTeilleistungstypTeilleistungstypNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling sTUTeilleistungstypTeilleistungstypNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = STU1Teilleistungstyp17BTeilleistungstypNr7D;

      return this.apiClient.callApi(
        '/STU/Teilleistungstyp/1', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * STU/Teilleistungstyp/{TeilleistungstypNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/STU1Teilleistungstyp17BTeilleistungstypNr7D}
     */
    this.sTUTeilleistungstypTeilleistungstypNr = function(contentType, pxSessionId) {
      return this.sTUTeilleistungstypTeilleistungstypNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * STU/Teilleistungsuntergruppe/{TeilleistungsuntergruppeNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.sTUTeilleistungsuntergruppeTeilleistungsuntergruppeNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling sTUTeilleistungsuntergruppeTeilleistungsuntergruppeNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling sTUTeilleistungsuntergruppeTeilleistungsuntergruppeNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/STU/Teilleistungsuntergruppe/1', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * STU/Teilleistungsuntergruppe/{TeilleistungsuntergruppeNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.sTUTeilleistungsuntergruppeTeilleistungsuntergruppeNr = function(contentType, pxSessionId) {
      return this.sTUTeilleistungsuntergruppeTeilleistungsuntergruppeNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
