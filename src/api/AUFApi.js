/**
 * PROFFIX REST API Request Sammlung
 * Dies ist eine Request-Sammlung der PROFFIX REST API, welche das PROFFIX REST API Entwicklerhandbuch unter [https://www.proffix.net/entwickler/restapi/handbuch](https://www.proffix.net/entwickler/restapi/handbuch) erg√§nzt.
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AUF1Dokument17BDokumentNr7D', 'model/AUF1Dokument17BDokumentNr7D1entsperrenRequest', 'model/AUF1Dokument17BDokumentNr7D1statusentfernenRequest', 'model/AUF1Dokument17BDokumentNr7D1teilrechnungerstellenRequest', 'model/AUF1Dokument17BDokumentNr7D1umwandelnRequest', 'model/AUF1DokumentRequest', 'model/AUF1Dokumentstatus17BDokumentstatusNr7D', 'model/AUF1Dokumenttyp17BDokumenttypNr7D', 'model/AUF1ESRNummer17BESRNr7D', 'model/AUF1Gutschein17BGutscheinNr7D', 'model/AUF1Gutschein1gutscheinnrgenerieren', 'model/AUF1GutscheinRequest', 'model/AUF1Occasionsobjekt17BOccasionsobjektNr7D', 'model/AUF1Zuschlag17BZuschlagNr7D'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AUF1Dokument17BDokumentNr7D'), require('../model/AUF1Dokument17BDokumentNr7D1entsperrenRequest'), require('../model/AUF1Dokument17BDokumentNr7D1statusentfernenRequest'), require('../model/AUF1Dokument17BDokumentNr7D1teilrechnungerstellenRequest'), require('../model/AUF1Dokument17BDokumentNr7D1umwandelnRequest'), require('../model/AUF1DokumentRequest'), require('../model/AUF1Dokumentstatus17BDokumentstatusNr7D'), require('../model/AUF1Dokumenttyp17BDokumenttypNr7D'), require('../model/AUF1ESRNummer17BESRNr7D'), require('../model/AUF1Gutschein17BGutscheinNr7D'), require('../model/AUF1Gutschein1gutscheinnrgenerieren'), require('../model/AUF1GutscheinRequest'), require('../model/AUF1Occasionsobjekt17BOccasionsobjektNr7D'), require('../model/AUF1Zuschlag17BZuschlagNr7D'));
  } else {
    // Browser globals (root is window)
    if (!root.ProffixRestApiRequestSammlung) {
      root.ProffixRestApiRequestSammlung = {};
    }
    root.ProffixRestApiRequestSammlung.AUFApi = factory(root.ProffixRestApiRequestSammlung.ApiClient, root.ProffixRestApiRequestSammlung.AUF1Dokument17BDokumentNr7D, root.ProffixRestApiRequestSammlung.AUF1Dokument17BDokumentNr7D1entsperrenRequest, root.ProffixRestApiRequestSammlung.AUF1Dokument17BDokumentNr7D1statusentfernenRequest, root.ProffixRestApiRequestSammlung.AUF1Dokument17BDokumentNr7D1teilrechnungerstellenRequest, root.ProffixRestApiRequestSammlung.AUF1Dokument17BDokumentNr7D1umwandelnRequest, root.ProffixRestApiRequestSammlung.AUF1DokumentRequest, root.ProffixRestApiRequestSammlung.AUF1Dokumentstatus17BDokumentstatusNr7D, root.ProffixRestApiRequestSammlung.AUF1Dokumenttyp17BDokumenttypNr7D, root.ProffixRestApiRequestSammlung.AUF1ESRNummer17BESRNr7D, root.ProffixRestApiRequestSammlung.AUF1Gutschein17BGutscheinNr7D, root.ProffixRestApiRequestSammlung.AUF1Gutschein1gutscheinnrgenerieren, root.ProffixRestApiRequestSammlung.AUF1GutscheinRequest, root.ProffixRestApiRequestSammlung.AUF1Occasionsobjekt17BOccasionsobjektNr7D, root.ProffixRestApiRequestSammlung.AUF1Zuschlag17BZuschlagNr7D);
  }
}(this, function(ApiClient, AUF1Dokument17BDokumentNr7D, AUF1Dokument17BDokumentNr7D1entsperrenRequest, AUF1Dokument17BDokumentNr7D1statusentfernenRequest, AUF1Dokument17BDokumentNr7D1teilrechnungerstellenRequest, AUF1Dokument17BDokumentNr7D1umwandelnRequest, AUF1DokumentRequest, AUF1Dokumentstatus17BDokumentstatusNr7D, AUF1Dokumenttyp17BDokumenttypNr7D, AUF1ESRNummer17BESRNr7D, AUF1Gutschein17BGutscheinNr7D, AUF1Gutschein1gutscheinnrgenerieren, AUF1GutscheinRequest, AUF1Occasionsobjekt17BOccasionsobjektNr7D, AUF1Zuschlag17BZuschlagNr7D) {
  'use strict';

  /**
   * AUF service.
   * @module api/AUFApi
   * @version 1.0
   */

  /**
   * Constructs a new AUFApi. 
   * @alias module:api/AUFApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * AUF/Dokument
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/AUF1DokumentRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.aUFDokumentWithHttpInfo = function(contentType, pxSessionId, body) {
      var postBody = body;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling aUFDokument");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling aUFDokument");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling aUFDokument");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/AUF/Dokument', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * AUF/Dokument
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/AUF1DokumentRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.aUFDokument = function(contentType, pxSessionId, body) {
      return this.aUFDokumentWithHttpInfo(contentType, pxSessionId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * AUF/Dokument/{DokumentNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AUF1Dokument17BDokumentNr7D} and HTTP response
     */
    this.aUFDokumentDokumentNrWithHttpInfo = function(depth, contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'depth' is set
      if (depth === undefined || depth === null) {
        throw new Error("Missing the required parameter 'depth' when calling aUFDokumentDokumentNr");
      }

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling aUFDokumentDokumentNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling aUFDokumentDokumentNr");
      }


      var pathParams = {
      };
      var queryParams = {
        'depth': depth,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = AUF1Dokument17BDokumentNr7D;

      return this.apiClient.callApi(
        '/AUF/Dokument/100018', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * AUF/Dokument/{DokumentNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AUF1Dokument17BDokumentNr7D}
     */
    this.aUFDokumentDokumentNr = function(depth, contentType, pxSessionId) {
      return this.aUFDokumentDokumentNrWithHttpInfo(depth, contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * AUF/Dokument/{DokumentNr}/entsperren
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/AUF1Dokument17BDokumentNr7D1entsperrenRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.aUFDokumentDokumentNrentsperrenWithHttpInfo = function(contentType, pxSessionId, body) {
      var postBody = body;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling aUFDokumentDokumentNrentsperren");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling aUFDokumentDokumentNrentsperren");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling aUFDokumentDokumentNrentsperren");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/AUF/Dokument/1/entsperren', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * AUF/Dokument/{DokumentNr}/entsperren
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/AUF1Dokument17BDokumentNr7D1entsperrenRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.aUFDokumentDokumentNrentsperren = function(contentType, pxSessionId, body) {
      return this.aUFDokumentDokumentNrentsperrenWithHttpInfo(contentType, pxSessionId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * AUF/Dokument/{DokumentNr}/statusentfernen
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/AUF1Dokument17BDokumentNr7D1statusentfernenRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.aUFDokumentDokumentNrstatusentfernenWithHttpInfo = function(contentType, pxSessionId, body) {
      var postBody = body;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling aUFDokumentDokumentNrstatusentfernen");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling aUFDokumentDokumentNrstatusentfernen");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling aUFDokumentDokumentNrstatusentfernen");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/AUF/Dokument/1/statusentfernen', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * AUF/Dokument/{DokumentNr}/statusentfernen
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/AUF1Dokument17BDokumentNr7D1statusentfernenRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.aUFDokumentDokumentNrstatusentfernen = function(contentType, pxSessionId, body) {
      return this.aUFDokumentDokumentNrstatusentfernenWithHttpInfo(contentType, pxSessionId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * AUF/Dokument/{DokumentNr}/teilrechnungerstellen
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/AUF1Dokument17BDokumentNr7D1teilrechnungerstellenRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.aUFDokumentDokumentNrteilrechnungerstellenWithHttpInfo = function(contentType, pxSessionId, body) {
      var postBody = body;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling aUFDokumentDokumentNrteilrechnungerstellen");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling aUFDokumentDokumentNrteilrechnungerstellen");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling aUFDokumentDokumentNrteilrechnungerstellen");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/AUF/Dokument/100018/teilrechnungerstellen', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * AUF/Dokument/{DokumentNr}/teilrechnungerstellen
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/AUF1Dokument17BDokumentNr7D1teilrechnungerstellenRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.aUFDokumentDokumentNrteilrechnungerstellen = function(contentType, pxSessionId, body) {
      return this.aUFDokumentDokumentNrteilrechnungerstellenWithHttpInfo(contentType, pxSessionId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * AUF/Dokument/{DokumentNr}/umwandeln
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/AUF1Dokument17BDokumentNr7D1umwandelnRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.aUFDokumentDokumentNrumwandelnWithHttpInfo = function(contentType, pxSessionId, body) {
      var postBody = body;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling aUFDokumentDokumentNrumwandeln");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling aUFDokumentDokumentNrumwandeln");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling aUFDokumentDokumentNrumwandeln");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/AUF/Dokument/100037/umwandeln', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * AUF/Dokument/{DokumentNr}/umwandeln
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/AUF1Dokument17BDokumentNr7D1umwandelnRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.aUFDokumentDokumentNrumwandeln = function(contentType, pxSessionId, body) {
      return this.aUFDokumentDokumentNrumwandelnWithHttpInfo(contentType, pxSessionId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * AUF/Dokumentstatus/{DokumentstatusNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AUF1Dokumentstatus17BDokumentstatusNr7D} and HTTP response
     */
    this.aUFDokumentstatusDokumentstatusNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling aUFDokumentstatusDokumentstatusNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling aUFDokumentstatusDokumentstatusNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = AUF1Dokumentstatus17BDokumentstatusNr7D;

      return this.apiClient.callApi(
        '/AUF/Dokumentstatus/A', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * AUF/Dokumentstatus/{DokumentstatusNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AUF1Dokumentstatus17BDokumentstatusNr7D}
     */
    this.aUFDokumentstatusDokumentstatusNr = function(contentType, pxSessionId) {
      return this.aUFDokumentstatusDokumentstatusNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * AUF/Dokumenttyp/{DokumenttypNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AUF1Dokumenttyp17BDokumenttypNr7D} and HTTP response
     */
    this.aUFDokumenttypDokumenttypNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling aUFDokumenttypDokumenttypNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling aUFDokumenttypDokumenttypNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = AUF1Dokumenttyp17BDokumenttypNr7D;

      return this.apiClient.callApi(
        '/AUF/Dokumenttyp/TR', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * AUF/Dokumenttyp/{DokumenttypNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AUF1Dokumenttyp17BDokumenttypNr7D}
     */
    this.aUFDokumenttypDokumenttypNr = function(contentType, pxSessionId) {
      return this.aUFDokumenttypDokumenttypNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * AUF/Dokumentverknuepfung/{DokumentverknuepfungNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.aUFDokumentverknuepfungDokumentverknuepfungNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling aUFDokumentverknuepfungDokumentverknuepfungNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling aUFDokumentverknuepfungDokumentverknuepfungNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/AUF/Dokumentverknuepfung/1', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * AUF/Dokumentverknuepfung/{DokumentverknuepfungNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.aUFDokumentverknuepfungDokumentverknuepfungNr = function(contentType, pxSessionId) {
      return this.aUFDokumentverknuepfungDokumentverknuepfungNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * AUF/ESRNummer/{ESRNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AUF1ESRNummer17BESRNr7D} and HTTP response
     */
    this.aUFESRNummerESRNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling aUFESRNummerESRNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling aUFESRNummerESRNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = AUF1ESRNummer17BESRNr7D;

      return this.apiClient.callApi(
        '/AUF/ESRNummer/1', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * AUF/ESRNummer/{ESRNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AUF1ESRNummer17BESRNr7D}
     */
    this.aUFESRNummerESRNr = function(contentType, pxSessionId) {
      return this.aUFESRNummerESRNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * AUF/Gutschein
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/AUF1GutscheinRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.aUFGutscheinWithHttpInfo = function(contentType, pxSessionId, body) {
      var postBody = body;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling aUFGutschein");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling aUFGutschein");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling aUFGutschein");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/AUF/Gutschein', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * AUF/Gutschein
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @param {module:model/AUF1GutscheinRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.aUFGutschein = function(contentType, pxSessionId, body) {
      return this.aUFGutscheinWithHttpInfo(contentType, pxSessionId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * AUF/Gutschein/{GutscheinNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AUF1Gutschein17BGutscheinNr7D} and HTTP response
     */
    this.aUFGutscheinGutscheinNrWithHttpInfo = function(depth, contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'depth' is set
      if (depth === undefined || depth === null) {
        throw new Error("Missing the required parameter 'depth' when calling aUFGutscheinGutscheinNr");
      }

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling aUFGutscheinGutscheinNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling aUFGutscheinGutscheinNr");
      }


      var pathParams = {
      };
      var queryParams = {
        'depth': depth,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = AUF1Gutschein17BGutscheinNr7D;

      return this.apiClient.callApi(
        '/AUF/Gutschein/KRUDT-3ISTL-VGTH7', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * AUF/Gutschein/{GutscheinNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AUF1Gutschein17BGutscheinNr7D}
     */
    this.aUFGutscheinGutscheinNr = function(depth, contentType, pxSessionId) {
      return this.aUFGutscheinGutscheinNrWithHttpInfo(depth, contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * AUF/Gutschein/gutscheinnrgenerieren
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AUF1Gutschein1gutscheinnrgenerieren} and HTTP response
     */
    this.aUFGutscheingutscheinnrgenerierenWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling aUFGutscheingutscheinnrgenerieren");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling aUFGutscheingutscheinnrgenerieren");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AUF1Gutschein1gutscheinnrgenerieren;

      return this.apiClient.callApi(
        '/AUF/Gutschein/gutscheinnrgenerieren', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * AUF/Gutschein/gutscheinnrgenerieren
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AUF1Gutschein1gutscheinnrgenerieren}
     */
    this.aUFGutscheingutscheinnrgenerieren = function(contentType, pxSessionId) {
      return this.aUFGutscheingutscheinnrgenerierenWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * AUF/Occasionsobjekt/{OccasionsobjektNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AUF1Occasionsobjekt17BOccasionsobjektNr7D} and HTTP response
     */
    this.aUFOccasionsobjektOccasionsobjektNrWithHttpInfo = function(depth, contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'depth' is set
      if (depth === undefined || depth === null) {
        throw new Error("Missing the required parameter 'depth' when calling aUFOccasionsobjektOccasionsobjektNr");
      }

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling aUFOccasionsobjektOccasionsobjektNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling aUFOccasionsobjektOccasionsobjektNr");
      }


      var pathParams = {
      };
      var queryParams = {
        'depth': depth,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = AUF1Occasionsobjekt17BOccasionsobjektNr7D;

      return this.apiClient.callApi(
        '/AUF/Occasionsobjekt/3', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * AUF/Occasionsobjekt/{OccasionsobjektNr}
     * @param {Number} depth 
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AUF1Occasionsobjekt17BOccasionsobjektNr7D}
     */
    this.aUFOccasionsobjektOccasionsobjektNr = function(depth, contentType, pxSessionId) {
      return this.aUFOccasionsobjektOccasionsobjektNrWithHttpInfo(depth, contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * AUF/Text/{TextNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.aUFTextTextNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling aUFTextTextNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling aUFTextTextNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/AUF/Text/T', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * AUF/Text/{TextNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.aUFTextTextNr = function(contentType, pxSessionId) {
      return this.aUFTextTextNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * AUF/Zuschlag/{ZuschlagNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AUF1Zuschlag17BZuschlagNr7D} and HTTP response
     */
    this.aUFZuschlagZuschlagNrWithHttpInfo = function(contentType, pxSessionId) {
      var postBody = null;

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling aUFZuschlagZuschlagNr");
      }

      // verify the required parameter 'pxSessionId' is set
      if (pxSessionId === undefined || pxSessionId === null) {
        throw new Error("Missing the required parameter 'pxSessionId' when calling aUFZuschlagZuschlagNr");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Content-Type': contentType,
        'PxSessionId': pxSessionId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json; charset=utf-8'];
      var returnType = AUF1Zuschlag17BZuschlagNr7D;

      return this.apiClient.callApi(
        '/AUF/Zuschlag/1', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * AUF/Zuschlag/{ZuschlagNr}
     * @param {String} contentType 
     * @param {String} pxSessionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AUF1Zuschlag17BZuschlagNr7D}
     */
    this.aUFZuschlagZuschlagNr = function(contentType, pxSessionId) {
      return this.aUFZuschlagZuschlagNrWithHttpInfo(contentType, pxSessionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
