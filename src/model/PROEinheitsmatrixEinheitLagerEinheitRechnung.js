/**
 * PROFFIX REST API Request Sammlung
 * Dies ist eine Request-Sammlung der PROFFIX REST API, welche das PROFFIX REST API Entwicklerhandbuch unter [https://www.proffix.net/entwickler/restapi/handbuch](https://www.proffix.net/entwickler/restapi/handbuch) erg√§nzt.
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/EinheitLager1', 'model/EinheitRechnung6'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./EinheitLager1'), require('./EinheitRechnung6'));
  } else {
    // Browser globals (root is window)
    if (!root.ProffixRestApiRequestSammlung) {
      root.ProffixRestApiRequestSammlung = {};
    }
    root.ProffixRestApiRequestSammlung.PROEinheitsmatrixEinheitLagerEinheitRechnung = factory(root.ProffixRestApiRequestSammlung.ApiClient, root.ProffixRestApiRequestSammlung.EinheitLager1, root.ProffixRestApiRequestSammlung.EinheitRechnung6);
  }
}(this, function(ApiClient, EinheitLager1, EinheitRechnung6) {
  'use strict';




  /**
   * The PROEinheitsmatrixEinheitLagerEinheitRechnung model module.
   * @module model/PROEinheitsmatrixEinheitLagerEinheitRechnung
   * @version 1.0
   */

  /**
   * Constructs a new <code>PROEinheitsmatrixEinheitLagerEinheitRechnung</code>.
   * @alias module:model/PROEinheitsmatrixEinheitLagerEinheitRechnung
   * @class
   * @param einheitLager {module:model/EinheitLager1} 
   * @param einheitRechnung {module:model/EinheitRechnung6} 
   * @param bezeichnung {String} 
   * @param einheitDim1 {String} 
   * @param einheitDim2 {String} 
   * @param einheitDim3 {String} 
   * @param rechnenDim1 {Boolean} 
   * @param rechnenDim2 {Boolean} 
   * @param rechnenDim3 {Boolean} 
   * @param divisor {Number} 
   * @param multiplikator {Number} 
   * @param rundung {Number} 
   * @param erstelltAm {String} 
   * @param erstelltVon {String} 
   * @param geaendertAm {String} 
   * @param geaendertVon {String} 
   * @param zusatzfelder {Object} 
   */
  var exports = function(einheitLager, einheitRechnung, bezeichnung, einheitDim1, einheitDim2, einheitDim3, rechnenDim1, rechnenDim2, rechnenDim3, divisor, multiplikator, rundung, erstelltAm, erstelltVon, geaendertAm, geaendertVon, zusatzfelder) {
    var _this = this;

    _this['EinheitLager'] = einheitLager;
    _this['EinheitRechnung'] = einheitRechnung;
    _this['Bezeichnung'] = bezeichnung;
    _this['EinheitDim1'] = einheitDim1;
    _this['EinheitDim2'] = einheitDim2;
    _this['EinheitDim3'] = einheitDim3;
    _this['RechnenDim1'] = rechnenDim1;
    _this['RechnenDim2'] = rechnenDim2;
    _this['RechnenDim3'] = rechnenDim3;
    _this['Divisor'] = divisor;
    _this['Multiplikator'] = multiplikator;
    _this['Rundung'] = rundung;
    _this['ErstelltAm'] = erstelltAm;
    _this['ErstelltVon'] = erstelltVon;
    _this['GeaendertAm'] = geaendertAm;
    _this['GeaendertVon'] = geaendertVon;
    _this['Zusatzfelder'] = zusatzfelder;
  };

  /**
   * Constructs a <code>PROEinheitsmatrixEinheitLagerEinheitRechnung</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/PROEinheitsmatrixEinheitLagerEinheitRechnung} obj Optional instance to populate.
   * @return {module:model/PROEinheitsmatrixEinheitLagerEinheitRechnung} The populated <code>PROEinheitsmatrixEinheitLagerEinheitRechnung</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('EinheitLager')) {
        obj['EinheitLager'] = EinheitLager1.constructFromObject(data['EinheitLager']);
      }
      if (data.hasOwnProperty('EinheitRechnung')) {
        obj['EinheitRechnung'] = EinheitRechnung6.constructFromObject(data['EinheitRechnung']);
      }
      if (data.hasOwnProperty('Bezeichnung')) {
        obj['Bezeichnung'] = ApiClient.convertToType(data['Bezeichnung'], 'String');
      }
      if (data.hasOwnProperty('EinheitDim1')) {
        obj['EinheitDim1'] = ApiClient.convertToType(data['EinheitDim1'], 'String');
      }
      if (data.hasOwnProperty('EinheitDim2')) {
        obj['EinheitDim2'] = ApiClient.convertToType(data['EinheitDim2'], 'String');
      }
      if (data.hasOwnProperty('EinheitDim3')) {
        obj['EinheitDim3'] = ApiClient.convertToType(data['EinheitDim3'], 'String');
      }
      if (data.hasOwnProperty('RechnenDim1')) {
        obj['RechnenDim1'] = ApiClient.convertToType(data['RechnenDim1'], 'Boolean');
      }
      if (data.hasOwnProperty('RechnenDim2')) {
        obj['RechnenDim2'] = ApiClient.convertToType(data['RechnenDim2'], 'Boolean');
      }
      if (data.hasOwnProperty('RechnenDim3')) {
        obj['RechnenDim3'] = ApiClient.convertToType(data['RechnenDim3'], 'Boolean');
      }
      if (data.hasOwnProperty('Divisor')) {
        obj['Divisor'] = ApiClient.convertToType(data['Divisor'], 'Number');
      }
      if (data.hasOwnProperty('Multiplikator')) {
        obj['Multiplikator'] = ApiClient.convertToType(data['Multiplikator'], 'Number');
      }
      if (data.hasOwnProperty('Rundung')) {
        obj['Rundung'] = ApiClient.convertToType(data['Rundung'], 'Number');
      }
      if (data.hasOwnProperty('ErstelltAm')) {
        obj['ErstelltAm'] = ApiClient.convertToType(data['ErstelltAm'], 'String');
      }
      if (data.hasOwnProperty('ErstelltVon')) {
        obj['ErstelltVon'] = ApiClient.convertToType(data['ErstelltVon'], 'String');
      }
      if (data.hasOwnProperty('GeaendertAm')) {
        obj['GeaendertAm'] = ApiClient.convertToType(data['GeaendertAm'], 'String');
      }
      if (data.hasOwnProperty('GeaendertVon')) {
        obj['GeaendertVon'] = ApiClient.convertToType(data['GeaendertVon'], 'String');
      }
      if (data.hasOwnProperty('Zusatzfelder')) {
        obj['Zusatzfelder'] = ApiClient.convertToType(data['Zusatzfelder'], Object);
      }
    }
    return obj;
  }

  /**
   * @member {module:model/EinheitLager1} EinheitLager
   */
  exports.prototype['EinheitLager'] = undefined;
  /**
   * @member {module:model/EinheitRechnung6} EinheitRechnung
   */
  exports.prototype['EinheitRechnung'] = undefined;
  /**
   * @member {String} Bezeichnung
   */
  exports.prototype['Bezeichnung'] = undefined;
  /**
   * @member {String} EinheitDim1
   */
  exports.prototype['EinheitDim1'] = undefined;
  /**
   * @member {String} EinheitDim2
   */
  exports.prototype['EinheitDim2'] = undefined;
  /**
   * @member {String} EinheitDim3
   */
  exports.prototype['EinheitDim3'] = undefined;
  /**
   * @member {Boolean} RechnenDim1
   */
  exports.prototype['RechnenDim1'] = undefined;
  /**
   * @member {Boolean} RechnenDim2
   */
  exports.prototype['RechnenDim2'] = undefined;
  /**
   * @member {Boolean} RechnenDim3
   */
  exports.prototype['RechnenDim3'] = undefined;
  /**
   * @member {Number} Divisor
   */
  exports.prototype['Divisor'] = undefined;
  /**
   * @member {Number} Multiplikator
   */
  exports.prototype['Multiplikator'] = undefined;
  /**
   * @member {Number} Rundung
   */
  exports.prototype['Rundung'] = undefined;
  /**
   * @member {String} ErstelltAm
   */
  exports.prototype['ErstelltAm'] = undefined;
  /**
   * @member {String} ErstelltVon
   */
  exports.prototype['ErstelltVon'] = undefined;
  /**
   * @member {String} GeaendertAm
   */
  exports.prototype['GeaendertAm'] = undefined;
  /**
   * @member {String} GeaendertVon
   */
  exports.prototype['GeaendertVon'] = undefined;
  /**
   * @member {Object} Zusatzfelder
   */
  exports.prototype['Zusatzfelder'] = undefined;



  return exports;
}));


