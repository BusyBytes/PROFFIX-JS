/**
 * PROFFIX REST API Request Sammlung
 * Dies ist eine Request-Sammlung der PROFFIX REST API, welche das PROFFIX REST API Entwicklerhandbuch unter [https://www.proffix.net/entwickler/restapi/handbuch](https://www.proffix.net/entwickler/restapi/handbuch) erg√§nzt.
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ProffixRestApiRequestSammlung);
  }
}(this, function(expect, ProffixRestApiRequestSammlung) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ProffixRestApiRequestSammlung.Positionen1();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Positionen1', function() {
    it('should create an instance of Positionen1', function() {
      // uncomment below and update the code to test Positionen1
      //var instance = new ProffixRestApiRequestSammlung.Positionen1();
      //expect(instance).to.be.a(ProffixRestApiRequestSammlung.Positionen1);
    });

    it('should have the property artikel (base name: "Artikel")', function() {
      // uncomment below and update the code to test the property artikel
      //var instance = new ProffixRestApiRequestSammlung.Positionen1();
      //expect(instance).to.be();
    });

    it('should have the property bezeichnung1 (base name: "Bezeichnung1")', function() {
      // uncomment below and update the code to test the property bezeichnung1
      //var instance = new ProffixRestApiRequestSammlung.Positionen1();
      //expect(instance).to.be();
    });

    it('should have the property bezeichnung2 (base name: "Bezeichnung2")', function() {
      // uncomment below and update the code to test the property bezeichnung2
      //var instance = new ProffixRestApiRequestSammlung.Positionen1();
      //expect(instance).to.be();
    });

    it('should have the property bezeichnung3 (base name: "Bezeichnung3")', function() {
      // uncomment below and update the code to test the property bezeichnung3
      //var instance = new ProffixRestApiRequestSammlung.Positionen1();
      //expect(instance).to.be();
    });

    it('should have the property bezeichnung4 (base name: "Bezeichnung4")', function() {
      // uncomment below and update the code to test the property bezeichnung4
      //var instance = new ProffixRestApiRequestSammlung.Positionen1();
      //expect(instance).to.be();
    });

    it('should have the property bezeichnung5 (base name: "Bezeichnung5")', function() {
      // uncomment below and update the code to test the property bezeichnung5
      //var instance = new ProffixRestApiRequestSammlung.Positionen1();
      //expect(instance).to.be();
    });

    it('should have the property dim2 (base name: "Dim2")', function() {
      // uncomment below and update the code to test the property dim2
      //var instance = new ProffixRestApiRequestSammlung.Positionen1();
      //expect(instance).to.be();
    });

    it('should have the property lagereinheit (base name: "Lagereinheit")', function() {
      // uncomment below and update the code to test the property lagereinheit
      //var instance = new ProffixRestApiRequestSammlung.Positionen1();
      //expect(instance).to.be();
    });

    it('should have the property rechnungseinheit (base name: "Rechnungseinheit")', function() {
      // uncomment below and update the code to test the property rechnungseinheit
      //var instance = new ProffixRestApiRequestSammlung.Positionen1();
      //expect(instance).to.be();
    });

    it('should have the property einkaufspreisFW (base name: "EinkaufspreisFW")', function() {
      // uncomment below and update the code to test the property einkaufspreisFW
      //var instance = new ProffixRestApiRequestSammlung.Positionen1();
      //expect(instance).to.be();
    });

    it('should have the property ertragskonto (base name: "Ertragskonto")', function() {
      // uncomment below and update the code to test the property ertragskonto
      //var instance = new ProffixRestApiRequestSammlung.Positionen1();
      //expect(instance).to.be();
    });

    it('should have the property gebinde (base name: "Gebinde")', function() {
      // uncomment below and update the code to test the property gebinde
      //var instance = new ProffixRestApiRequestSammlung.Positionen1();
      //expect(instance).to.be();
    });

    it('should have the property gewicht (base name: "Gewicht")', function() {
      // uncomment below and update the code to test the property gewicht
      //var instance = new ProffixRestApiRequestSammlung.Positionen1();
      //expect(instance).to.be();
    });

    it('should have the property inhalt (base name: "Inhalt")', function() {
      // uncomment below and update the code to test the property inhalt
      //var instance = new ProffixRestApiRequestSammlung.Positionen1();
      //expect(instance).to.be();
    });

    it('should have the property istOption (base name: "IstOption")', function() {
      // uncomment below and update the code to test the property istOption
      //var instance = new ProffixRestApiRequestSammlung.Positionen1();
      //expect(instance).to.be();
    });

    it('should have the property dim1 (base name: "Dim1")', function() {
      // uncomment below and update the code to test the property dim1
      //var instance = new ProffixRestApiRequestSammlung.Positionen1();
      //expect(instance).to.be();
    });

    it('should have the property lagerpreis (base name: "Lagerpreis")', function() {
      // uncomment below and update the code to test the property lagerpreis
      //var instance = new ProffixRestApiRequestSammlung.Positionen1();
      //expect(instance).to.be();
    });

    it('should have the property menge (base name: "Menge")', function() {
      // uncomment below and update the code to test the property menge
      //var instance = new ProffixRestApiRequestSammlung.Positionen1();
      //expect(instance).to.be();
    });

    it('should have the property mengeVerr (base name: "MengeVerr")', function() {
      // uncomment below and update the code to test the property mengeVerr
      //var instance = new ProffixRestApiRequestSammlung.Positionen1();
      //expect(instance).to.be();
    });

    it('should have the property nichtanzeigen (base name: "Nichtanzeigen")', function() {
      // uncomment below and update the code to test the property nichtanzeigen
      //var instance = new ProffixRestApiRequestSammlung.Positionen1();
      //expect(instance).to.be();
    });

    it('should have the property optional (base name: "Optional")', function() {
      // uncomment below and update the code to test the property optional
      //var instance = new ProffixRestApiRequestSammlung.Positionen1();
      //expect(instance).to.be();
    });

    it('should have the property positionsart (base name: "Positionsart")', function() {
      // uncomment below and update the code to test the property positionsart
      //var instance = new ProffixRestApiRequestSammlung.Positionen1();
      //expect(instance).to.be();
    });

    it('should have the property positionstyp (base name: "Positionstyp")', function() {
      // uncomment below and update the code to test the property positionstyp
      //var instance = new ProffixRestApiRequestSammlung.Positionen1();
      //expect(instance).to.be();
    });

    it('should have the property preisFW (base name: "PreisFW")', function() {
      // uncomment below and update the code to test the property preisFW
      //var instance = new ProffixRestApiRequestSammlung.Positionen1();
      //expect(instance).to.be();
    });

    it('should have the property rabattFW (base name: "RabattFW")', function() {
      // uncomment below and update the code to test the property rabattFW
      //var instance = new ProffixRestApiRequestSammlung.Positionen1();
      //expect(instance).to.be();
    });

    it('should have the property rabattProzent (base name: "RabattProzent")', function() {
      // uncomment below and update the code to test the property rabattProzent
      //var instance = new ProffixRestApiRequestSammlung.Positionen1();
      //expect(instance).to.be();
    });

    it('should have the property steuercode (base name: "Steuercode")', function() {
      // uncomment below and update the code to test the property steuercode
      //var instance = new ProffixRestApiRequestSammlung.Positionen1();
      //expect(instance).to.be();
    });

    it('should have the property steuerFW (base name: "SteuerFW")', function() {
      // uncomment below and update the code to test the property steuerFW
      //var instance = new ProffixRestApiRequestSammlung.Positionen1();
      //expect(instance).to.be();
    });

    it('should have the property dim3 (base name: "Dim3")', function() {
      // uncomment below and update the code to test the property dim3
      //var instance = new ProffixRestApiRequestSammlung.Positionen1();
      //expect(instance).to.be();
    });

    it('should have the property totalFW (base name: "TotalFW")', function() {
      // uncomment below and update the code to test the property totalFW
      //var instance = new ProffixRestApiRequestSammlung.Positionen1();
      //expect(instance).to.be();
    });

    it('should have the property verpackungen (base name: "Verpackungen")', function() {
      // uncomment below and update the code to test the property verpackungen
      //var instance = new ProffixRestApiRequestSammlung.Positionen1();
      //expect(instance).to.be();
    });

    it('should have the property zusatzartikelreferenz (base name: "Zusatzartikelreferenz")', function() {
      // uncomment below and update the code to test the property zusatzartikelreferenz
      //var instance = new ProffixRestApiRequestSammlung.Positionen1();
      //expect(instance).to.be();
    });

  });

}));
